<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kunjan&#39;s Web Space</title>
    <link>http://kunjan.in/tags/functional/index.xml</link>
    <description>Recent content on Kunjan&#39;s Web Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://kunjan.in/tags/functional/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reactive Services with Servicestack and F#</title>
      <link>http://kunjan.in/2015/11/reactive-services-with-servicestack-and-fsharp/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/11/reactive-services-with-servicestack-and-fsharp/</guid>
      <description>&lt;p&gt;Reactive word is not new nowadays. If you want your library to get limelight, use reactive word in the name any way possible and it will definitely get initial attention. Reactive word is appropriate for things that follows &lt;a href=&#34;http://www.reactivemanifesto.org/&#34;&gt;reactive manifesto&lt;/a&gt;. That is true for now. And there are many variant of libraries on server and client to fulfil this.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start from the start of web.&lt;/p&gt;

&lt;p&gt;We were having old web were we used to do post event of page. At the time of posting whole page goes to server. And then &lt;em&gt;loading loading loading&lt;/em&gt; of the page. But after the rise of &lt;a href=&#34;https://jquery.com/&#34;&gt;JQuery&lt;/a&gt; page refresh become the thing of past. AJAX was there even before JQuery but become widely used after that only.
Now, that spinner which was there in browser tab bar / address bar came in center of page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Side Note&lt;/strong&gt;: If you want to make ajax request faster just use a spinner &lt;strong&gt;gif&lt;/strong&gt; which spins faster. Tried and tested thing. With no code change performance issue will be resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With hardware getting better and if I be more specific more connected it is easy to store lots of data. And this makes things slower eventually. And user have to wait even for ajax request. So, what is next. With &lt;a href=&#34;http://html5doctor.com/&#34;&gt;HTML5&lt;/a&gt; allowing Web Sockets and Server Events things are becoming real-time as now pushing data from Server to client is possible.&lt;/p&gt;

&lt;p&gt;Server and Client is no more one-sided love story. Now, both can send message to each other. This new change allows build more reactive system.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take example. I request my friend to come with me to visit &lt;code&gt;X&lt;/code&gt; place. I got answer &lt;code&gt;yes, will go.&lt;/code&gt; So, my request is accepted but we haven&amp;rsquo;t visited that place. Visit is still pending. After sometime we visited. So, result happen. I don&amp;rsquo;t have to ask again and again. But that event pushed by that end.&lt;/p&gt;

&lt;p&gt;Same goes for server. In post event client request for some data. But that data may or may not be available at that specific moment. So, Server can send &lt;code&gt;201 - Accepted&lt;/code&gt; status to client. So, data is accepted and waiting for processed result. And whenever result it ready server push data to client. This way neither server is blocked nor client.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is will be no need for spinner. Neither slow not fast.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://signalr.net/&#34;&gt;SignalR&lt;/a&gt; is very well-known example of real-time processing. But I wanted to achieve this by API framework. And nothing can be better than &lt;a href=&#34;https://servicestack.net/&#34;&gt;Servicestack&lt;/a&gt;. It is having Server Sent Event / Server Event support in all 4+ version. So, why not?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s jump into code. Code is in &lt;a href=&#34;http://fsharp.org/&#34;&gt;F#&lt;/a&gt;. It is in F# for a reason and that you will know. Keep on reading.&lt;/p&gt;

&lt;p&gt;I am running a standalone Servicestack host but same code will working with Asp.net host also.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Programe.fs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module reactiveServicestack.main
open ServiceStack
open System
open ServiceStack.Logging

type AppHost() = 
    inherit AppHostHttpListenerBase (&amp;quot;Hello F# Service&amp;quot;, typeof&amp;lt;HelloService&amp;gt;.Assembly)
    override this.Configure container = 
        this.Plugins.Add(new PostmanFeature()) |&amp;gt; ignore
        this.Plugins.Add(new CorsFeature()) |&amp;gt; ignore
        this.Plugins.Add(new ServerEventsFeature()) |&amp;gt; ignore
        let serverEventsFeature = this.GetPlugin&amp;lt;ServerEventsFeature&amp;gt;() 
        printfn &amp;quot;%s&amp;quot; serverEventsFeature.StreamPath
        ignore()


[&amp;lt;EntryPoint&amp;gt;]
let main args = 
    LogManager.LogFactory &amp;lt;- new ConsoleLogFactory()
    let env_port = Environment.GetEnvironmentVariable(&amp;quot;PORT&amp;quot;)
    let port = if env_port = null then &amp;quot;1234&amp;quot; else env_port
    let host = &amp;quot;http://localhost:8080/&amp;quot;
    printfn &amp;quot;listening on %s ...&amp;quot; host
    let appHost = new AppHost()
    appHost.Init() |&amp;gt; ignore
    appHost.Start host |&amp;gt; ignore
    while true do Console.ReadLine() |&amp;gt; ignore
    0 // return an integer exit code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above code is very much classic Servicestack. Nothing fancy here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HelloDto.fs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace reactiveServicestack
open System
open ServiceStack

//I can&#39;t but CLI can mutate this one
[&amp;lt;CLIMutable&amp;gt;]
type HelloResponse = { Result:string }


//There always be hello world, atleast something should be running
[&amp;lt;Route(&amp;quot;/hello&amp;quot;)&amp;gt;]
[&amp;lt;Route(&amp;quot;/hello/{name}&amp;quot;)&amp;gt;]
type Hello() =
    interface IReturn&amp;lt;HelloResponse&amp;gt;
    member val Name = &amp;quot;&amp;quot; with get, set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, POCO members. Hello and HelloResponse. No magic here also.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AsyncProcessor.fs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#nowarn &amp;quot;40&amp;quot;
namespace reactiveServicestack

module SSE =
    open ServiceStack
    let private serverEvent = ServiceStackHost.Instance.Container.TryResolve&amp;lt;IServerEvents&amp;gt;()
    let NotifyAll (msg:&#39;T) = serverEvent.NotifyAll(msg)



module AsyncProcess =
    open System

    let rnd = new Random()
    let agent = 
        MailboxProcessor.Start(fun inbox -&amp;gt; 
            let rec messageLoop = 
                async {
                    let! (msg:Hello) = inbox.Receive()
                    do! Async.Sleep(3000)
                    Console.WriteLine(&amp;quot;Original &amp;quot; + msg.Name)
                    let reversed = msg.Name.ToCharArray() |&amp;gt; Array.rev |&amp;gt; fun x -&amp;gt; new String (x)
                    Console.WriteLine(&amp;quot;Reversed &amp;quot; + reversed)
                    SSE.NotifyAll({HelloResponse.Result = reversed})
                    return! messageLoop
                }
            messageLoop)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here fun starts. I am creating Actor which takes Hello typed message and NotifyAll with HelloResponse after processing name string.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s understand complicated parts.&lt;/p&gt;

&lt;p&gt;I have created SSE module because if I open Servicestack I was getting &lt;code&gt;asyncbuilder&lt;/code&gt; compile error at async keyword. And I needed to open it to expose all the extension methods. So, I wrap things up in another module.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don&amp;rsquo;t&lt;/em&gt; create seperate instance of any kind of ServerEvent implementation instead resolve it as above. Else things will surely not work. I was stuck at that problem for couple of days.&lt;/p&gt;

&lt;p&gt;Actor is very much traditional, I am reversing a string and as it is &lt;em&gt;very complex&lt;/em&gt; process. My actor will take precisely &lt;strong&gt;3&lt;/strong&gt; seconds to do it. And then I am notifying to all from actor itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ideal case it should be Subscriber ID/s or Channel/s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As, actor is async by nature it may complicate stuff to return things from agent loop. If you have used framework like &lt;a href=&#34;http://getakka.net/&#34;&gt;AKKA&lt;/a&gt; you must be knowing that &lt;code&gt;ASK&lt;/code&gt; is performance heavy in compare to &lt;code&gt;TELL&lt;/code&gt;. This way you can fire result from Actor itself.&lt;/p&gt;

&lt;p&gt;Now, you can easily guess what service will look like&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hello.fs&lt;/code&gt;
    namespace reactiveServicestack
    open ServiceStack
        open ServiceStack.Logging
        open System
        open System.Net&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type HelloService() =
        inherit Service()
        member val serverEvents:IServerEvents = null with get, set
        member this.Get (request:Hello) = 
            {Result = &amp;quot;Hello &amp;quot; + request.Name}
        member this.Post (request: Hello) =
            AsyncProcess.agent.Post(request)
            HttpStatusCode.Accepted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And final piece of puzzle &lt;strong&gt;HTML&lt;/strong&gt;
&lt;code&gt;default.html&lt;/code&gt;
    &lt;html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Reactive Servicestack&amp;lt;/title&amp;gt;
    &amp;lt;link href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.css&amp;quot; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;Hello this is default page&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Enter Your name&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;button id=&amp;quot;reverse&amp;quot;&amp;gt;Reverse&amp;lt;/button&amp;gt;
        &amp;lt;ul&amp;gt;

        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;//code.jquery.com/jquery-2.1.4.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;/js/ss-utils.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        $(&#39;#name&#39;).keypress(function (e) {
            var key = e.which;
            if(key == 13)  // the enter key code
            {
                $(&#39;#reverse&#39;).click();
                $(&#39;#name&#39;).val(&#39;&#39;);
                return false;  
            }
        }); 
        $(&#39;#reverse&#39;).click(function(e) {
            e.preventDefault();
            var name = $(&#39;#name&#39;).val();

            if (name != &#39;&#39; || name != undefined) {
                $.post(&#39;/hello&#39;, {
                        name: name
                    })
                    .done(function() {
                        toastr.success(name + &#39; is very much Accepted!&#39;)
                    });
            }
        });
        var addName = function(reversedName) {
            $(&#39;ul&#39;).append(&#39;&amp;lt;li&amp;gt;&#39; + reversedName + &#39;&amp;lt;/li&amp;gt;&#39;);
        };
        var channel = &#39;home&#39;;
        var eventSource = new EventSource(&#39;/event-stream?channel=home&amp;amp;t=&#39; + new Date().getTime());
        $(eventSource).handleServerEvents({
            handlers: {
                HelloResponse: function(msg) {
                        console.log(msg);
                        addName(msg.Result);
                    }
                    //... Register custom handlers
            }
        });

    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am taking post request and returning &lt;code&gt;201-accepted&lt;/code&gt; instead of &lt;code&gt;200-ok&lt;/code&gt; from server. On client it will go in &lt;code&gt;success&lt;/code&gt; callback only.&lt;/p&gt;

&lt;p&gt;This way we can easily decouple server and client. And this can be used for games, stock market, betting or other reactive systems.&lt;/p&gt;

&lt;p&gt;I am not going in detail of Actor or AKKA but as it natively available in F# so I used it. One of the reason beside being more fun while writing code.&lt;/p&gt;

&lt;p&gt;Please provide your input for this. I don&amp;rsquo;t know this is right / wrong or can&amp;rsquo;t say. But it is very much possible that using current technology even without enabling Web Sockets (&lt;em&gt;Most of the cloud provider supports web sockets&lt;/em&gt;) one can create reactive web services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. - With this there will be no need for spinner at all.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Azure web sites with Paket</title>
      <link>http://kunjan.in/2015/11/azure-web-sites-with-paket/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/11/azure-web-sites-with-paket/</guid>
      <description>&lt;p&gt;Whoever worked with Microsoft Shop knows about &lt;a href=&#34;https://www.nuget.org/&#34;&gt;nuget&lt;/a&gt;. It is package manager for anything and everything related to .Net. And it is getting better and better with versions coming in. But again it is nowhere near maturity needed to work with projects having many small projects. Things get cranky soon.&lt;/p&gt;

&lt;p&gt;Now, there is better option as per my opinion called &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;Paket&lt;/a&gt;. Very easy to get started. And so damn reliable. Couple of more command to learn but I guess it is ok. It most of the mess of nuget. And best thing no XML.&lt;/p&gt;

&lt;p&gt;Now, I normally throw anything and everything to Azure websites. Just do experiments and its free. Mostly I put project in &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; and pull in Azure. Easiest way to test something or anything which need network.&lt;/p&gt;

&lt;p&gt;Now, you can have Paket also instead of nuget with minimum changes. There are detailed &lt;a href=&#34;http://www.hanselman.com/blog/RunningSuaveioAndFWithFAKEInAzureWebAppsWithGitAndTheDeployButton.aspx&#34;&gt;article&lt;/a&gt; you can found written by &lt;a href=&#34;http://www.hanselman.com&#34;&gt;Scott Hanselman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But for you existing or new web project what can be minimum requirement.&lt;/p&gt;

&lt;p&gt;You need to create &lt;code&gt;.deployment&lt;/code&gt; in root of your project. It will tell Azure build system to not to go with defaults. (I guess build system is called Kudu.)&lt;/p&gt;

&lt;p&gt;In that file copy paste below code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[config]
command = build.cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two lines to tell use &lt;code&gt;build.cmd&lt;/code&gt; to build project.&lt;/p&gt;

&lt;p&gt;Now, we obviously need &lt;code&gt;build.cmd&lt;/code&gt; file in root.&lt;/p&gt;

&lt;p&gt;And here is code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@ECHO OFF
setlocal

echo ====== Restoring packages... ======

if not exist .paket\paket.exe (
  .paket\paket.bootstrapper.exe
)

.paket\paket.exe restore

if not %ERRORLEVEL% == 0 (
  echo ====== Failed to restore packages. ======
  exit 1
)

echo ====== Building... ======

msbuild /p:Configuration=Release

if not %ERRORLEVEL% == 0 (
echo ====== Build failed. ======
  exit 1
)

if not &amp;quot;%DEPLOYMENT_TARGET%&amp;quot; == &amp;quot;&amp;quot; (
  echo ====== Deploying... ======
  xcopy /y /e &amp;lt;project name&amp;gt; &amp;quot;%DEPLOYMENT_TARGET%&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code is very much self explanatory.&lt;/p&gt;

&lt;p&gt;First pull latest paket.exe, then restore package. msbuild is there only so use it. And age-old xcopy to copy built files to deployment target.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bang! Its done. You can check things out in with log tail or console on azure portal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to go little bit advanced and want kinda build system then you can always try for &lt;a href=&#34;http://fsharp.github.io/FAKE/&#34;&gt;FAKE&lt;/a&gt;. But if you are in great hurry and don&amp;rsquo;t want waste time with nuget issues go for Paket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Packaging!!!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Command Pattern</title>
      <link>http://kunjan.in/2015/04/functional-command-pattern/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-command-pattern/</guid>
      <description>&lt;p&gt;Command pattern is a pattern which allows executor of the pattern to execute or playback the commands. In most of the application wherever Undo/Redo is implemented this pattern is used.&lt;/p&gt;

&lt;p&gt;Here is C# code.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/5wmvGN&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Now, in this code Command Pattern is not in its purest form. As, normally in command pattern we are saving state of outside object. Instead I just returned the result to mock out side object.&lt;/p&gt;

&lt;p&gt;Now have a look at similar F# code. That is doing kinda same thing.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/htQsqv&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Here, instead of class I am using functions with the command type. And definition of the command is given as type instead of interface. Now, this is fun with functional programming in general where functions are first class citizen. I can save commands and events like objects only. I don&amp;rsquo;t have to wrap around some classes. This makes code more concise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fan of &lt;a href=&#34;http://martinfowler.com/bliki/CQRS.html&#34;&gt;CQRS&lt;/a&gt; and &lt;a href=&#34;http://www.martinfowler.com/eaaDev/EventSourcing.html&#34;&gt;Event Sourcing&lt;/a&gt;; listen up these both design concepts are standing on the shoulders of command pattern.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Functional Strategy Pattern</title>
      <link>http://kunjan.in/2015/04/functional-strategy-pattern/</link>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-strategy-pattern/</guid>
      <description>&lt;p&gt;Another pattern that is widely used in Object Oriented world. And as far as .Net world is concern it is may be most used pattern in wide range of .Net API. And it &lt;em&gt;heavily&lt;/em&gt; used in &lt;em&gt;heavily&lt;/em&gt; used LINQ API.&lt;/p&gt;

&lt;p&gt;So, I guess giving a understanding of that is kinda waste of space. Have a look at C# code.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/c4qcvo&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;People familiar with LINQ and lovers of Lambda will definitely argue that this is can be replaced by delegates. And for the face I am arguing the same. But for now I have took this sample as a traditional practice.&lt;/p&gt;

&lt;p&gt;Now, have a look at the F# code doing the same.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/rhn63P&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Now, it is definitely not &lt;strong&gt;one to one&lt;/strong&gt; replacement as I have did in last few posts. But here I have replaced class with function but we are achieving the same thing.&lt;/p&gt;

&lt;p&gt;Now, what is strategy pattern. As name suggest it is used to provide strategy from the consumer end. It is like I am saying that I want coffee and also I am telling I want cappuccino. And as shown in sample for sorting I am passing sorting strategy also. For example case I haven&amp;rsquo;t passed array else I have to pass array or list and also strategy or how to sort it. It is mainly used when consumer is having control on how to do execution but execution is done by someone else.&lt;/p&gt;

&lt;p&gt;Now, in case of C# and Java8 where lambda is available. So I have this functional behavior there also. But for the fact it is functional programming concept of passing functions around &lt;em&gt;(or some may argue it is object oriented concept in purest form)&lt;/em&gt; and syntax wise it more suitable / human friendly in functional programming language.&lt;/p&gt;

&lt;p&gt;Here is C# example.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/63PK93&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;It is very much near to F# counter part. Only F# syntax is having less noise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It something all togather when this pattern shown in context of Functional Programming. I am just composing functions. But it serves as Strategy Pattern of OOP so I have used that.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Functional Singleton Pattern</title>
      <link>http://kunjan.in/2015/04/functional-singleton-pattern/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-singleton-pattern/</guid>
      <description>&lt;p&gt;This is my favorite pattern. First pattern I learn. And till date I don&amp;rsquo;t know where to use it. &lt;strong&gt;So, I use everywhere. :P&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have mainly used for database connection object and then all JavaScript frameworks are exposing Singleton object only. I can say it is quite useful in case of web.&lt;/p&gt;

&lt;p&gt;Fun part about this pattern is that most of the people including me always use this pattern to show off that we know patterns and we follow it in practice but in most cases that practice starts and stops with Singleton Pattern.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s understand the pattern, as name suggested this pattern is propagating singularity. Object of specific class will be created once and only once but No more. Object creation is totally hidden away from consumer and with static method object will be handed over to consumer. If there is a instance presence it will be handed over else new instance will be created and it will be given to consumer.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check out the C# code&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/ou8ReI&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;See, simple and easy.&lt;/p&gt;

&lt;p&gt;And now here is F# code. Even simpler and easier&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/EAcx3W&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;Look ma no &lt;code&gt;null&lt;/code&gt;. As F# is not allowing null by default in the system there is no need to check it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead make constructor private to stop creating object of type and provide same instance of type again and again.&lt;/p&gt;

&lt;p&gt;Now, in current scenarios where garbage collector are so powerful and we are having quite a good amount of hardware to process. Singleton is not used while writing domain/business code. But still it is widely used on API side to expose specific functionality.&lt;/p&gt;

&lt;p&gt;I am still to find relevance in case of functional programming. In functional programming &lt;code&gt;type&lt;/code&gt; is different then &lt;code&gt;class&lt;/code&gt;. In normal cases they don&amp;rsquo;t have behaviors attached with it. So, it reducing the need of this pattern.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Factory Pattern</title>
      <link>http://kunjan.in/2015/04/functional-factory-pattern/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-factory-pattern/</guid>
      <description>&lt;p&gt;The fun part working or explaining functional pattern is word &lt;code&gt;functional&lt;/code&gt; can be used in very &lt;code&gt;fun&lt;/code&gt; way. Just like it is used in title here.&lt;/p&gt;

&lt;p&gt;Now, factory pattern may be the most used pattern in Object Oriented world. Here is code in &lt;code&gt;C#&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/omFgPe&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;  

&lt;p&gt;Factory method is basically used to abstract away the object creation. I am not worried how object is created but I am worried about the behavior of the objects that are created.
Now, lets have a look at &lt;code&gt;F#&lt;/code&gt; equivalent&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/vt23Gc&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;If you can see it is short and simple and providing same result.&lt;/p&gt;

&lt;p&gt;Now, functional programming is not &lt;code&gt;one to one&lt;/code&gt; map with Object Oriented programming. But we can always have similar a concept.&lt;/p&gt;

&lt;p&gt;Factory Pattern simply hiding the object creation. And in F# we are having option type which is helping us to provide concrete definition of product. And that is the reason we can skip the concrete class and have product definition in type.&lt;/p&gt;

&lt;p&gt;I have took examples for this post from &lt;a href=&#34;http://www.dofactory.com/&#34;&gt;Dofactory&lt;/a&gt; and &lt;a href=&#34;http://fssnip.net/authors/Tao+Liu&#34;&gt;Tao Liu&lt;/a&gt; s work. I have made few changes thought to make it as similar as possible. In future post I will try to go into greater detail about respective pattern and also check out patterns that can be absolute when you come to the world of functional programming.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;F# people. Your comments and review are required. Will update the code as per the suggestions. Do provide them. I don&amp;rsquo;t mind adding examples of other functional language if anyone is helping me out.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Typed Hack of Cloudant using F#</title>
      <link>http://kunjan.in/2014/11/typed-hack-of-cloudant-using-fsharp/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2014/11/typed-hack-of-cloudant-using-fsharp/</guid>
      <description>&lt;p&gt;There is a continues war between typed and untyped data. But then there is need of finding a middle ground for ever growing application. There is place, a requirement when I feel application should be typed and data store should be untyped. So, I created this little code snippet to access cloudant (a couchbase fork) NOSQL database.&lt;/p&gt;

&lt;p&gt;I was knowing about &lt;a href=&#34;http://cloudant.com&#34;&gt;Cloudant&lt;/a&gt; from long back. Even before IBM bought it. It is indeed a wonderful service and also kinda free for small stuff. I thought this will be best fit for now. (I still don&amp;rsquo;t know why I didn&amp;rsquo;t use Mongodb).&lt;/p&gt;

&lt;p&gt;As there is no need of scary relations ships with database. So, I decided to use this one.&lt;/p&gt;

&lt;p&gt;Now as one problem is solved other started. It is saving data that is in JSON format. That is untyped and F# is statically typed. I have tried few libraries developed in C# but was not happy. So, I thought it is just a HTTP request, why shouldn&amp;rsquo;t I give it as shot to make one of my own helper module? It is may be some what dirty attempt but I got it working what I needed with less than 100 lines. Here is code snippets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#r &amp;quot;../packages/Http.fs.1.4.0/lib/net40/HttpClient.dll&amp;quot;
#r &amp;quot;../packages/Newtonsoft.Json.6.0.6/lib/net45/Newtonsoft.Json.dll&amp;quot;

open HttpClient
open Newtonsoft.Json
open Newtonsoft.Json.Linq

[&amp;lt;CLIMutableAttribute&amp;gt;]
type Row&amp;lt;&#39;a&amp;gt; = 
    { id : string
      key : string
      value : &#39;a }

[&amp;lt;CLIMutableAttribute&amp;gt;]
type ResultSet&amp;lt;&#39;a&amp;gt; = 
    { total_rows : int
      offset : int
      rows : Row&amp;lt;&#39;a&amp;gt; [] }

[&amp;lt;CLIMutableAttribute&amp;gt;]
type PostResult = 
    { ok : string
      id : string
      rev : string }

[&amp;lt;CLIMutableAttribute&amp;gt;]
type PostError = 
    { error : string
      reason : string }

let cloudantUrl = @&amp;quot;&amp;lt;cloudanturl/databasename/&amp;gt;&amp;quot;
let username = @&amp;quot;&amp;lt;username&amp;gt;&amp;quot;
let password = @&amp;quot;&amp;lt;password&amp;gt;&amp;quot;

let private cloudantGet url = 
    let request = 
        createRequest Get url
        |&amp;gt; withBasicAuthentication username password
        |&amp;gt; withHeader (ContentType &amp;quot;application/json&amp;quot;)
    request |&amp;gt; getResponseBody

let private cloudantPost url data = 
    let request = 
        createRequest Post url
        |&amp;gt; withBasicAuthentication username password
        |&amp;gt; withBody data
        |&amp;gt; withHeader (ContentType &amp;quot;application/json&amp;quot;)
    request |&amp;gt; getResponseBody

let private checkDataForNewId (data : JObject) = 
    let removeIdrev (data : JObject) = 
        data.Remove(&amp;quot;_id&amp;quot;) |&amp;gt; ignore
        data.Remove(&amp;quot;_rev&amp;quot;) |&amp;gt; ignore
    if System.String.IsNullOrEmpty(data.[&amp;quot;_id&amp;quot;].ToString()) || System.String.IsNullOrEmpty(data.[&amp;quot;_rev&amp;quot;].ToString()) then 
        removeIdrev data
    data

let PostJson&amp;lt;&#39;a&amp;gt; data = 
    let serializedObject = JObject.FromObject(data) |&amp;gt; checkDataForNewId
    serializedObject.Add(&amp;quot;$doctype&amp;quot;, JToken.Parse(&amp;quot;&#39;&amp;quot; + data.GetType().Name + &amp;quot;&#39;&amp;quot;))
    cloudantPost cloudantUrl &amp;lt;| serializedObject.ToString()

let GetJsonByType&amp;lt;&#39;a&amp;gt; = 
    let resultset = 
        JsonConvert.DeserializeObject&amp;lt;ResultSet&amp;lt;&#39;a&amp;gt;&amp;gt;
            (cloudantGet (cloudantUrl + &amp;quot;/_design/Type/_view/&amp;quot; + typeof&amp;lt;&#39;a&amp;gt;.Name))
    query { 
        for row in resultset.rows do
            select row.value
    }

let GetJsonById&amp;lt;&#39;a&amp;gt; Id = JsonConvert.DeserializeObject&amp;lt;&#39;a&amp;gt;(cloudantGet (cloudantUrl + Id))

[&amp;lt;CLIMutableAttribute&amp;gt;]
type Person = 
    { _id : string
      _rev : string
      FirstName : string
      LastName : string }

let newPerson = 
    { _id = &amp;quot;&amp;quot;
      _rev = &amp;quot;&amp;quot;
      FirstName = &amp;quot;Boom&amp;quot;
      LastName = &amp;quot;Baam&amp;quot; }

let inline isNull (x:^a when ^a : not struct) =
    obj.ReferenceEquals (x, Unchecked.defaultof&amp;lt;_&amp;gt;)

let findPerson = 
    query { 
        for p in GetJsonByType&amp;lt;Person&amp;gt; do
            where (p.FirstName = &amp;quot;Boom&amp;quot;)
            select p
            headOrDefault
            }
isNull findPerson    
GetJsonById&amp;lt;Person&amp;gt; (&amp;quot;3b389dc6b8ee0dcbf7f366faaa59cf42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In above code below part is just for testing. And even with that code snippet is 98 lines. So, with blank line removed it is even short.&lt;/p&gt;

&lt;p&gt;Now, in cloudant I need to create views so its code is like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function(doc) {
    if (doc.$doctype !== &amp;quot;Person&amp;quot;) return;
    var copydoc = JSON.parse(JSON.stringify(doc));
    delete copydoc[&amp;quot;$doctype&amp;quot;];
    emit(doc._id,copydoc);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I need &lt;code&gt;$doctype&lt;/code&gt; while I am inserting or updating data only, not while reading. So, I am removing it. As I am already filtering based on type.&lt;/p&gt;

&lt;p&gt;In above code two libraries are getting used one is &lt;a href=&#34;https://github.com/relentless/Http.fs&#34;&gt;Http.fs&lt;/a&gt; and the other is &lt;a href=&#34;http://james.newtonking.com/json&#34;&gt;JSON.net&lt;/a&gt; libraries.&lt;/p&gt;

&lt;p&gt;In library as you can see I am not doing anything special. I am inserting data with type information. If new data is there I am removing &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;_rev&lt;/code&gt; and for simplicity sake I had put &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;_rev&lt;/code&gt; in all the types I am using to interacting with Cloudant data store.&lt;/p&gt;

&lt;p&gt;So, now whenever I am reading I just need to give type and that will be fetched as collection of that typed records. And once collection came to memory now I have powerful F# to process data. In above code I am using &lt;code&gt;query&lt;/code&gt; expression to do so. It becomes very easy and fun to use. And it is damn fast. At least for now.&lt;/p&gt;

&lt;p&gt;Now, I don&amp;rsquo;t know it if perfect or not. It kinda part functional and part Object Oriented as far as I know. Should I convert this to Type Provider or is it possible or not? I don&amp;rsquo;t know. But one thing is sure I am achieving what I wanted with simplest possible code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dear F# community members&lt;/strong&gt; do provide your views on this. And also let me know if it will be use full to make it more mature and push it as nuget package. Or may be a type provider for Cloudant?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Highly inspired by &lt;a href=&#34;https://twitter.com/dmohl&#34;&gt;Daniel Mohl&amp;rsquo;s&lt;/a&gt; old library &lt;a href=&#34;https://github.com/dmohl/FSharpCouch&#34;&gt;FSharpCouch&lt;/a&gt;. Thank you&amp;hellip; :)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Yes, I like functional programming</title>
      <link>http://kunjan.in/2013/08/i-like-functional-programming/</link>
      <pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2013/08/i-like-functional-programming/</guid>
      <description>&lt;p&gt;Because it is good. It is fun to write code in functional language. It takes away unnecessary complexity from my way. It do as problem needed I don&amp;rsquo;t need to act as computer to give instruction to computer for how to do computing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And just like this specific blog, it is concise, crisp and like haiku short and sweet.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>