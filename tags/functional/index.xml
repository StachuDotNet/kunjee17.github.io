<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional on Kunjan&#39;s Web Space</title>
    <link>http://kunjan.in/tags/functional/</link>
    <description>Recent content in Functional on Kunjan&#39;s Web Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://kunjan.in/tags/functional/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Opinionated Fable - Architecture &amp; Performance</title>
      <link>http://kunjan.in/2018/03/opinionated-fable-architecture-and-performance/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2018/03/opinionated-fable-architecture-and-performance/</guid>
      <description>There can&amp;rsquo;t be better time for writing this blog. As Fable 2.0 is on the horizon it would be good to see what 1.0 already can do. And I can also wish few things to be added to 2.0.
I have chosen Fable after evaluating couple of options like TypeScript-React-Redux, Elm, Aurelia, Angular. One thing I was pretty much sure that I wanted static typing in my project. Because I did have first hand experience with big fat Angular application built using JavaScript.</description>
    </item>
    
    <item>
      <title>Reactive Chat application using ServiceStack and Fable in F#</title>
      <link>http://kunjan.in/2017/12/indian-chaat-with-fsharp/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2017/12/indian-chaat-with-fsharp/</guid>
      <description>Here is my Birthday blog post, as a part of FSAdvent - 2017. Just like previous two years, I hope you will enjoy this one too. Comments and corrections are very much welcomed.
 Why Chaat? and What is Chaat? If anyone wanted to show real time application, then Chat is kind of to-do list of that type of applications. Now Functional Chat is a very limited title and can&amp;rsquo;t show all the things I wanted to show.</description>
    </item>
    
    <item>
      <title>Reactive Services with Servicestack and F#</title>
      <link>http://kunjan.in/2015/11/reactive-services-with-servicestack-and-fsharp/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/11/reactive-services-with-servicestack-and-fsharp/</guid>
      <description>Reactive word is not new nowadays. If you want your library to get limelight, use reactive word in the name any way possible and it will definitely get initial attention. Reactive word is appropriate for things that follows reactive manifesto. That is true for now. And there are many variant of libraries on server and client to fulfil this.
Let&amp;rsquo;s start from the start of web.
We were having old web were we used to do post event of page.</description>
    </item>
    
    <item>
      <title>Azure web sites with Paket</title>
      <link>http://kunjan.in/2015/11/azure-web-sites-with-paket/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/11/azure-web-sites-with-paket/</guid>
      <description>Whoever worked with Microsoft Shop knows about nuget. It is package manager for anything and everything related to .Net. And it is getting better and better with versions coming in. But again it is nowhere near maturity needed to work with projects having many small projects. Things get cranky soon.
Now, there is better option as per my opinion called Paket. Very easy to get started. And so damn reliable. Couple of more command to learn but I guess it is ok.</description>
    </item>
    
    <item>
      <title>Functional Command Pattern</title>
      <link>http://kunjan.in/2015/04/functional-command-pattern/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-command-pattern/</guid>
      <description>Command pattern is a pattern which allows executor of the pattern to execute or playback the commands. In most of the application wherever Undo/Redo is implemented this pattern is used.
Here is C# code.
 Now, in this code Command Pattern is not in its purest form. As, normally in command pattern we are saving state of outside object. Instead I just returned the result to mock out side object.</description>
    </item>
    
    <item>
      <title>Functional Strategy Pattern</title>
      <link>http://kunjan.in/2015/04/functional-strategy-pattern/</link>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-strategy-pattern/</guid>
      <description>Another pattern that is widely used in Object Oriented world. And as far as .Net world is concern it is may be most used pattern in wide range of .Net API. And it heavily used in heavily used LINQ API.
So, I guess giving a understanding of that is kinda waste of space. Have a look at C# code.
 People familiar with LINQ and lovers of Lambda will definitely argue that this is can be replaced by delegates.</description>
    </item>
    
    <item>
      <title>Functional Singleton Pattern</title>
      <link>http://kunjan.in/2015/04/functional-singleton-pattern/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-singleton-pattern/</guid>
      <description>This is my favorite pattern. First pattern I learn. And till date I don&amp;rsquo;t know where to use it. So, I use everywhere. :P
I have mainly used for database connection object and then all JavaScript frameworks are exposing Singleton object only. I can say it is quite useful in case of web.
Fun part about this pattern is that most of the people including me always use this pattern to show off that we know patterns and we follow it in practice but in most cases that practice starts and stops with Singleton Pattern.</description>
    </item>
    
    <item>
      <title>Functional Factory Pattern</title>
      <link>http://kunjan.in/2015/04/functional-factory-pattern/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-factory-pattern/</guid>
      <description>The fun part working or explaining functional pattern is word functional can be used in very fun way. Just like it is used in title here.
Now, factory pattern may be the most used pattern in Object Oriented world. Here is code in C#.
 Factory method is basically used to abstract away the object creation. I am not worried how object is created but I am worried about the behavior of the objects that are created.</description>
    </item>
    
    <item>
      <title>Typed Hack of Cloudant using F#</title>
      <link>http://kunjan.in/2014/11/typed-hack-of-cloudant-using-fsharp/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2014/11/typed-hack-of-cloudant-using-fsharp/</guid>
      <description>There is a continues war between typed and untyped data. But then there is need of finding a middle ground for ever growing application. There is place, a requirement when I feel application should be typed and data store should be untyped. So, I created this little code snippet to access cloudant (a couchbase fork) NOSQL database.
I was knowing about Cloudant from long back. Even before IBM bought it. It is indeed a wonderful service and also kinda free for small stuff.</description>
    </item>
    
    <item>
      <title>Yes, I like functional programming</title>
      <link>http://kunjan.in/2013/08/i-like-functional-programming/</link>
      <pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2013/08/i-like-functional-programming/</guid>
      <description>Because it is good. It is fun to write code in functional language. It takes away unnecessary complexity from my way. It do as problem needed I don&amp;rsquo;t need to act as computer to give instruction to computer for how to do computing.
 And just like this specific blog, it is concise, crisp and like haiku short and sweet.
 </description>
    </item>
    
  </channel>
</rss>