<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kunjan&#39;s Web Space</title>
    <link>http://kunjan.in/index.xml</link>
    <description>Recent content on Kunjan&#39;s Web Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Dec 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://kunjan.in/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Indian Chaat with F#</title>
      <link>http://kunjan.in/2017/12/indian-chaat-with-fsharp/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2017/12/indian-chaat-with-fsharp/</guid>
      <description>

&lt;h1 id=&#34;why-chaat-and-what-is-chaat&#34;&gt;Why Chaat? and What is Chaat?&lt;/h1&gt;

&lt;p&gt;Most of us - developers like two things more than anything; eating (,cooking for some) and coding. So, I like to talk about one of the favorite dishes; &lt;strong&gt;Indian Chaat&lt;/strong&gt;. Yup, it is more about F# and also part of &lt;a href=&#34;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&#34;&gt;fsAdvent calendar 2017&lt;/a&gt;. So, why this specific dish??? To understand that you should try searching &lt;a href=&#34;https://www.google.com/search?tbm=isch&amp;amp;source=hp&amp;amp;biw=1920&amp;amp;bih=940&amp;amp;ei=gdMzWvjqBsrivgSrgYOQCg&amp;amp;q=french+onion+soup&amp;amp;oq=french+o&amp;amp;gs_l=img.3.0.0l10.1779.4421.0.5814.10.9.0.0.0.0.218.715.0j3j1.4.0....0...1ac.1.64.img..6.4.711....0.yR2qZd_wqn4&#34;&gt;French Onion Soup&lt;/a&gt; or &lt;a href=&#34;https://www.google.com/search?biw=1920&amp;amp;bih=940&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;ei=iNMzWqqhOKOQvQS4zqWoAQ&amp;amp;q=pizza&amp;amp;oq=pizz&amp;amp;gs_l=psy-ab.3.0.0i67k1l2j0j0i67k1l6j0.37294.38020.0.39124.4.4.0.0.0.0.200.585.0j2j1.3.0....0...1c.1.64.psy-ab..1.3.582....0.V2wR_A3l2D0&#34;&gt;Pizzas&lt;/a&gt; and then Search for &lt;a href=&#34;https://www.google.com/search?biw=1920&amp;amp;bih=940&amp;amp;tbm=isch&amp;amp;sa=1&amp;amp;ei=sdMzWrLMKYn9vgSBhpz4DA&amp;amp;q=Indian+Chaat&amp;amp;oq=Indian+Chaat&amp;amp;gs_l=psy-ab.3..0l10.3694.16984.0.17138.15.13.1.0.0.0.297.1972.0j4j5.9.0....0...1c.1.64.psy-ab..5.10.1991...0i67k1.0.IJpHl8f_YYA&#34;&gt;Indian Chaat&lt;/a&gt;. Indian Chaat is completely different in every picture. Even it&amp;rsquo;s bare bone parts are different. &lt;strong&gt;Chaat&lt;/strong&gt; you can make it from what you want, way you want and still enjoy it. That is the heart of it. And currently that is possible with &lt;em&gt;dotnet core&lt;/em&gt; . Be it on any OS, using any editor/IDE and still you make things work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So, what I will do here in this post. I will try to make Simple &lt;strong&gt;Chat&lt;/strong&gt; (yup, kind of Chaat) application by picking up my &lt;em&gt;favourite&lt;/em&gt; frameworks or libraries. And also give reasons for that. And in &lt;code&gt;Epilogue&lt;/code&gt; I will try to provide all other options that can be replaced or mixed matched. So, you can try it by your self. It is more or less spin off of SAFE style application. You can find links of everything below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;current-state-of-dotnet-core&#34;&gt;Current state of dotnet core&lt;/h1&gt;

&lt;p&gt;Dotnet core is &lt;strong&gt;Unbiased&lt;/strong&gt; version of dotnet. Yeah, it kind of works on every OS. And specially with other editors. Also more openly developed. It may not be best but credit should be given. So, here I am using that. If you are sticking with &lt;em&gt;Dotnet&lt;/em&gt;, be it big fat company or start up. If you are not making Desktop application, you should be moving to &lt;em&gt;core&lt;/em&gt; for sure.&lt;/p&gt;

&lt;h1 id=&#34;functional-programming-with-f&#34;&gt;Functional Programming with F#&lt;/h1&gt;

&lt;p&gt;There are many Microsoft people may tell you don&amp;rsquo;t worry about &lt;code&gt;F#&lt;/code&gt; and should take care of requirements on hand first. I am saying the same thing, for the sake of &lt;em&gt;requirements&lt;/em&gt; you should be using F#. &lt;em&gt;C#&lt;/em&gt; may be good and supported by Microsoft wholeheartedly but as developer we should choose our things based on task at our hand. And from personal experience of around 10 Years in Software Industry. Few things are already proven for current time, Functional First / Functional language is already winner, no matter how many features may be added to OOP languages they are still not like prior language. OOP language never designed for that. They have their place but I am not sure about future. Be it ReasonML, ELM, Scala or F#. statically typed or not that will boil down to personal choice. Another thing is &lt;em&gt;Big projects&lt;/em&gt; be it server or client with fast pace delivery is here to stay. Make a peace with it and choose it accordingly.&lt;/p&gt;

&lt;h1 id=&#34;visual-studio-code&#34;&gt;Visual Studio &lt;em&gt;Code&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;While making this project and also nowadays I am using VSCode more often. Whatever bad karma earned by Visual Studio, VSCode is leveling it. And leveling them quite well. VSCode with &lt;a href=&#34;http://ionide.io/&#34;&gt;ionide&lt;/a&gt; is quite killing it. It is not the beast like it&amp;rsquo;s counter part but surely get things done and it is quite faster.&lt;/p&gt;

&lt;h1 id=&#34;servicestack&#34;&gt;ServiceStack&lt;/h1&gt;

&lt;p&gt;Servicestack is built with C#, and OOP framework. It was good old alternative of WCF, If WCF is still around? Then it became better version of WebAPI (WebAPI is more or less inspired by ServiceStack). Currently it has touched &lt;a href=&#34;http://docs.servicestack.net/releases/v5.0.0&#34;&gt;V5&lt;/a&gt;. And it is quite mature and flexible. Also providing way many things out of box. When there was vacuum in F# specific web framework, &lt;a href=&#34;https://servicestack.net/&#34;&gt;Servicestack&lt;/a&gt; was kind of choice for F# people. And there is obvious reason for that. Not only it works with F# but looks way better with it. And vision of Servicestack was quite futuristic, it is one of the first to force developer to think in message while doing web development. And cut to &lt;strong&gt;2017&lt;/strong&gt; every good development strategy talks about message driven development in client side. Take is react-redux, &lt;a href=&#34;http://elm-lang.org/&#34;&gt;Elm&lt;/a&gt; or &lt;a href=&#34;https://fable-elmish.github.io/elmish/&#34;&gt;Fable-Elmish&lt;/a&gt;. &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt; is way to go for making big application on client side.&lt;/p&gt;

&lt;p&gt;Take a example here.&lt;/p&gt;

&lt;p&gt;Here are DTOs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [&amp;lt;CLIMutableAttribute&amp;gt;]
    type Message = {
        Data : string
        Color : string
    }


    [&amp;lt;CLIMutableAttribute&amp;gt;]
    type OutPutMessages = {
        Data : Message []
    }

    [&amp;lt;CLIMutableAttribute&amp;gt;]
    [&amp;lt;Route(&amp;quot;/Chat&amp;quot;)&amp;gt;]
    type InputMessage = {
        UserId : int
        Created : DateTime
        Message : Message
    } with interface IReturn&amp;lt;OutPutMessages&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is Service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type ServerEventsServices() =
        inherit Service()

        member __.Post(request : InputMessage) =
            chaatAgent.Post request
            {Data = storage.ToArray()} |&amp;gt; box

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you skip &lt;em&gt;little code base configuration&lt;/em&gt; then this may be simplest way to understand communications. Everything is message. Just like that. Skip the &lt;em&gt;Agent&lt;/em&gt; line for now.&lt;/p&gt;

&lt;h1 id=&#34;fable&#34;&gt;Fable&lt;/h1&gt;

&lt;p&gt;Fable is one of many &lt;em&gt;your favourite language&lt;/em&gt; to &lt;em&gt;JavaScript&lt;/em&gt; transpiler. Fable here is converting quite a mature functional language. I like to quote &lt;a href=&#34;https://reasonml.github.io/guide/what-and-why&#34;&gt;ReasonML&lt;/a&gt; page here that also suggesting Fable as one of the alternative if not ReasonML. It is easy to use like Elm with the same time it more flexible then it.&lt;/p&gt;

&lt;h2 id=&#34;elmish&#34;&gt;Elmish&lt;/h2&gt;

&lt;p&gt;As I mentioned Elm architecture is way to mover forward if you are making big / fat business application. From personal experience I can say if you are or your team or team you know is using &lt;strong&gt;Angularjs&lt;/strong&gt; specifically 1.0 to make big application. Tell them to change or just run away from there.&lt;/p&gt;

&lt;p&gt;Elmish is thin wrapper around react to provide Elm like architecture without any redux complexity. Provide you message driven architecture to work with. Elmish architecture have three main parts. &lt;strong&gt;Model -&amp;gt; View -&amp;gt; Update&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    type [&amp;lt;StringEnum&amp;gt;]SpanCls = Red | Blue | Green | Yellow

    type Model =  {
        LocalStr : string
        ServerMessages : Message []
        SpanCls : SpanCls
    }

    type Msg =
    | ChangeStr of string
    | ChangeColor of SpanCls
    | PreparePost
    | PostMessage of InputMessage
    | SuccessMessages of OutPutMessages
    | SSESuccessMessages of OutPutMessages
    | Failed of exn

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Forget about &lt;em&gt;Model&lt;/em&gt; for now. As it is just a represantation for view. More important here is &lt;em&gt;Msg&lt;/em&gt;. If you can see &lt;em&gt;of InputMessage&lt;/em&gt; and &lt;em&gt;of OutputMessages&lt;/em&gt; both are directly from Server. And all three message including with &lt;em&gt;Failed&lt;/em&gt; is there to communicate with Server. It is direct connection with Server&amp;rsquo;s DTOs. Other msg is to handle user event from view. So, every communication is divided with specific message and handled in State/Update.&lt;/p&gt;

&lt;h3 id=&#34;view&#34;&gt;View&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    let root model dispatch =
        div [] [
            Content.content [] [
            ul [] [
                for m in model.ServerMessages do
                yield
                    li[][
                    span [ClassName m.color][str m.data]
                    ]
            ]
            ]

            br []
            br []
            p [ClassName (model.SpanCls.ToString())] [str (sprintf &amp;quot;local message %s&amp;quot; model.LocalStr)]


            Control.control_div [] [
            Radio.radio [CustomClass &amp;quot;red&amp;quot;] [
                Radio.input [
                Radio.Input.name &amp;quot;color&amp;quot;
                Radio.Input.props [
                    Checked (model.SpanCls = Red)
                    OnChange (fun _ -&amp;gt; Red |&amp;gt; ChangeColor |&amp;gt; dispatch)
                    ]
                ]
                str &amp;quot;Red&amp;quot;
            ]
            Radio.radio [CustomClass &amp;quot;green&amp;quot;] [
                Radio.input [
                Radio.Input.name &amp;quot;color&amp;quot;
                Radio.Input.props [
                    Checked (model.SpanCls = Green)
                    OnChange (fun _ -&amp;gt; Green |&amp;gt; ChangeColor |&amp;gt; dispatch)
                    ]
                ]
                str &amp;quot;Green&amp;quot;
            ]
            Radio.radio [CustomClass &amp;quot;yellow&amp;quot;] [
                Radio.input [
                Radio.Input.name &amp;quot;color&amp;quot;
                Radio.Input.props [
                    Checked (model.SpanCls = Yellow)
                    OnChange (fun _ -&amp;gt; Yellow |&amp;gt; ChangeColor |&amp;gt; dispatch)
                    ]
                ]
                str &amp;quot;Yellow&amp;quot;
            ]
            Radio.radio [CustomClass &amp;quot;blue&amp;quot;] [
                Radio.input [
                    Radio.Input.name &amp;quot;color&amp;quot;
                    Radio.Input.props [
                    Checked (model.SpanCls = Blue)
                    OnChange (fun _ -&amp;gt; Blue |&amp;gt; ChangeColor |&amp;gt; dispatch)
                    ]
                ]
                str &amp;quot;Blue&amp;quot;
            ]
            ]

            Control.control_div [] [
            Input.input [
                Input.typeIsText
                Input.placeholder &amp;quot;AddSomething&amp;quot;
                Input.value model.LocalStr
                Input.props [
                OnChange (fun ev -&amp;gt; !!ev.target?value |&amp;gt; ChangeStr |&amp;gt; dispatch)
                ]
            ]
            ]
            Button.button_btn [
            Button.onClick (fun _ -&amp;gt; PreparePost |&amp;gt; dispatch)
            ] [str &amp;quot;Post&amp;quot;]
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normally I skip the view part. As html is not that interesting. But this is different. It is not only statically typed HTML but also having &lt;a href=&#34;https://bulma.io/&#34;&gt;Bulma&lt;/a&gt; wrapped with staticially typed functions. Means if this compiles you don&amp;rsquo;t have to worry about even CSS typos. Thanks to &lt;a href=&#34;https://mangelmaxime.github.io/Fulma/&#34;&gt;Fulma&lt;/a&gt;. And that is how you write html-css with confidence.&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    let update msg model =
        match msg with
        | ChangeStr s -&amp;gt;
            {model with LocalStr = s}, Cmd.none
        | ChangeColor s -&amp;gt;
            {model with SpanCls = s}, Cmd.none
        | PreparePost -&amp;gt;
            let inputMessage = dtos.InputMessage.Create()
            let message = dtos.Message.Create()
            message.color &amp;lt;- model.SpanCls.ToString()
            message.data &amp;lt;- model.LocalStr
            inputMessage.created &amp;lt;- DateTime.Now.ToString()
            inputMessage.userId &amp;lt;- 0.
            inputMessage.message &amp;lt;- message
            let postCmd = Cmd.ofMsg (PostMessage inputMessage)
            model,postCmd
        | PostMessage pm -&amp;gt;
            let msgPost (msg : InputMessage) =
            client.post (msg :&amp;gt; IReturn&amp;lt;OutPutMessages&amp;gt;)
            let helloCmd (msg: InputMessage) =
            Cmd.ofPromise msgPost msg SuccessMessages Failed
            let msgCmd = helloCmd pm
            model, msgCmd
        | SuccessMessages o -&amp;gt;
            {model with ServerMessages = o.data.ToArray(); LocalStr = &amp;quot;&amp;quot;}, Cmd.none
        | SSESuccessMessages o -&amp;gt;
            {model with ServerMessages = o.data.ToArray()}, Cmd.none
        | Failed exn -&amp;gt;
            model, Cmd.none
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A very simple update method. Now closely look at &lt;em&gt;PreparePost&lt;/em&gt; message. That is where Fable ecosystem shined, I am mutating thing. As it is not that strict. And for the fact mutable is not bad but shared mutable is very bad. I am preparing post command here and the hand it over to other method. And from there it will go forward.&lt;/p&gt;

&lt;h2 id=&#34;ts2fable&#34;&gt;ts2fable&lt;/h2&gt;

&lt;p&gt;In above &lt;em&gt;PreparePost&lt;/em&gt; and &lt;em&gt;PostMessage&lt;/em&gt; message; there are few things like &lt;em&gt;dtos&lt;/em&gt; and &lt;em&gt;client&lt;/em&gt; . That all comes thanks to ts2fable. A library used to convert typescript definition file to F# imports. It is quite magical and super awesome. Currently in beta but works most of the time for around 95% of code.&lt;/p&gt;

&lt;p&gt;And here is code how you use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let [&amp;lt;Import(&amp;quot;*&amp;quot;,&amp;quot;@servicestack\client&amp;quot;)&amp;gt;] SSClient: SSClient.IExports = jsNative

let [&amp;lt;Import(&amp;quot;*&amp;quot;,&amp;quot;./../Imports/IndianChaat.dtos&amp;quot;)&amp;gt;] dtos: IExports = jsNative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple one line import and all library functions are available in your project.&lt;/p&gt;

&lt;p&gt;Convert &lt;em&gt;index.d.ts&lt;/em&gt; from &lt;em&gt;@servicestack\client&lt;/em&gt; to create Import file. And then just pull it in your code. Client library is also provided by Servicestck. And it is having quite complete typed library for TypeScript. So, you use that just like that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What about &lt;em&gt;dtos&lt;/em&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can generate typescript dtos using &lt;em&gt;@servicestack\cli&lt;/em&gt;. Then using &lt;code&gt;tsc -d&lt;/code&gt; command created js and definitions. And then using ts2fable convert to import. Then pull it in your project. Seems little complicated but it is just few commands.&lt;/p&gt;

&lt;p&gt;So, now you have typed client library with typed dtos for you. Here are the Dtos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type [&amp;lt;AllowNullLiteral&amp;gt;] OutPutMessages =
    abstract data: ResizeArray&amp;lt;Message&amp;gt; with get, set

type [&amp;lt;AllowNullLiteral&amp;gt;] OutPutMessagesStatic =
    [&amp;lt;Emit &amp;quot;new $0($1...)&amp;quot;&amp;gt;] abstract Create: unit -&amp;gt; OutPutMessages

type [&amp;lt;AllowNullLiteral&amp;gt;] Message =
    abstract data: string with get, set
    abstract color: string with get, set

type [&amp;lt;AllowNullLiteral&amp;gt;] InputMessage =
    inherit IReturn&amp;lt;OutPutMessages&amp;gt;
    abstract userId: float with get, set
    abstract created: string with get, set
    abstract message: Message with get, set
    abstract createResponse: unit -&amp;gt; OutPutMessages
    abstract getTypeName: unit -&amp;gt; string

type [&amp;lt;AllowNullLiteral&amp;gt;] InputMessageStatic =
    [&amp;lt;Emit &amp;quot;new $0($1...)&amp;quot;&amp;gt;] abstract Create: unit -&amp;gt; InputMessage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is another way that you can directly share &lt;code&gt;dtos&lt;/code&gt; from server file. That is benefit of using F# on client and server both side. But then I can&amp;rsquo;t show great work done with ts2fable tool.&lt;/p&gt;

&lt;h1 id=&#34;aaa-actor-agent-async&#34;&gt;AAA - Actor-Agent-Async&lt;/h1&gt;

&lt;p&gt;if we are talking about big application, then giving skip to &lt;em&gt;scale&lt;/em&gt; word never gonna happen. And still most of the &lt;em&gt;Enterprise Application&lt;/em&gt; move around &lt;em&gt;Design Patterns&lt;/em&gt;. But I am pretty sure that for AAA size application you need AAA solution. You can use all or either of it. Power and Flexibility are also in same order as mentioned above. Actor is having referential transparency while agent don&amp;rsquo;t. Due to this Actors are more suitable for Micro-service kind of architecture. Using actors you can off load your heavy process to another machine without any issue. Also, it easy to set up cluster with them. That is not possible with agents. I guess &lt;code&gt;Async&lt;/code&gt; is pretty much known by everyone. Also all will agree that Async is quite necessary but at the same time difficult to implement correctly. (I am not considering Java in here. Syntax is so horrific.)&lt;/p&gt;

&lt;p&gt;For a simplicity case I am using Agent here. Just taking middle ground.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type Utility() =
        static let rand = Random()

        static member RandomSleep() =
            let ms = rand.Next(1,1000)
            Thread.Sleep ms


    let storage = new List&amp;lt;Message&amp;gt;()

    let blastAgent = Agent&amp;lt;List&amp;lt;Message&amp;gt;&amp;gt;.Start(fun inbox -&amp;gt;
        let rec messageLoop() = async {
            let! msg = inbox.Receive()
            Utility.RandomSleep()
            let sse = ServiceStack.ServiceStackHost.Instance.Container.TryResolve&amp;lt;ServiceStack.IServerEvents&amp;gt;()
            let blastObject = {Data = (msg.ToArray())}
            sse.NotifyChannel(&amp;quot;home&amp;quot;,&amp;quot;cmd.chat&amp;quot;, blastObject)
            return! messageLoop()
        }
        messageLoop()
    )

    let chaatAgent = Agent&amp;lt;InputMessage&amp;gt;.Start(fun inbox -&amp;gt;
        let rec messageLoop() = async {
            let! msg = inbox.Receive()
            Utility.RandomSleep()
            storage.Add(msg.Message)
            blastAgent.Post storage
            return! messageLoop()
        }
        messageLoop()
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agents are async in nature. Always take one message from queue. So, you don&amp;rsquo;t have to worry about &lt;code&gt;locks&lt;/code&gt; or &lt;code&gt;mutability&lt;/code&gt;. They run in isolation. So, no more stepping on anyone&amp;rsquo;s foot. Basically in simple words
they are queue with processing brain. If you take the line &lt;code&gt;let sse = ServiceStack.ServiceStackHost.Instance.Container.TryResolve&amp;lt;ServiceStack.IServerEvents&amp;gt;()&lt;/code&gt;, here I am messaging from server to client using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events&#34;&gt;SSE-Server Sent Events&lt;/a&gt;. Mighty Servicestack provide support for it out of box.&lt;/p&gt;

&lt;p&gt;And here is code on client side.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    let subscribe =
        let socketSubscription dispatch = 
            let eventSourceOptions = createEmpty&amp;lt;IEventSourceOptions&amp;gt;
            eventSourceOptions.handlers &amp;lt;- createObj [
                // &amp;quot;onConnect&amp;quot; ==&amp;gt; fun (sub : ServerEventConnect) -&amp;gt; printfn &amp;quot;onConnect: %A&amp;quot; sub.displayName
                // &amp;quot;onJoin&amp;quot; ==&amp;gt; fun (msg: ServerEventJoin) -&amp;gt; printfn &amp;quot;onJoin: %A&amp;quot; msg.displayName
                // &amp;quot;onLeave&amp;quot; ==&amp;gt; fun (msg: ServerEventLeave) -&amp;gt; printfn &amp;quot;onLeave: %A&amp;quot; msg.displayName
                // &amp;quot;onUpdate&amp;quot; ==&amp;gt; fun (msg : ServerEventUpdate) -&amp;gt; printfn &amp;quot;onUpdate %A&amp;quot; msg.displayName
                &amp;quot;onMessage&amp;quot; ==&amp;gt; fun (msg: ServerEventMessage) -&amp;gt; printfn &amp;quot;onMessage %A&amp;quot; msg.json
                &amp;quot;chat&amp;quot; ==&amp;gt; fun (msg : OutPutMessages) -&amp;gt;
                                msg |&amp;gt; (SSESuccessMessages &amp;gt;&amp;gt; dispatch)
            ] |&amp;gt; Some |&amp;gt; Some

            let channels = [|&amp;quot;home&amp;quot;; &amp;quot;&amp;quot;|]
            SSClient.ServerEventsClient.Create(baseUrl
            , new List&amp;lt;string&amp;gt;(channels)
            , eventSourceOptions
            ).start() |&amp;gt; ignore
        Cmd.ofSub socketSubscription
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More power to Fable and their support for dynamic nature of JavaScript. If you can see it is more mixture of Static and Dynamic typing. While I am creating object using static type &lt;code&gt;IEventSourceOptions&lt;/code&gt;, I am registering handler using Fable&amp;rsquo;s dynamic support to crate &lt;code&gt;JS object&lt;/code&gt; on the fly. And from here to again goes to &lt;code&gt;update&lt;/code&gt; method using dispatch. from there application loop will take over.&lt;/p&gt;

&lt;h1 id=&#34;business-business-business&#34;&gt;Business Business Business&lt;/h1&gt;

&lt;p&gt;There are three thing important for any Software &lt;code&gt;Business Business Business&lt;/code&gt; . Be it architecture, UX or scale. All boils down to business and how you execute it. For me I like my compiler to do work for me. I don&amp;rsquo;t want to write more code as less code means less errors. Also code should be kind of future friendly.&lt;/p&gt;

&lt;p&gt;It is reason behind picking up language and frameworks. In above use case I am replying with message that is not updated. I m sending across old message. By doing this I am not blocking the user. Even not in async loop. And then I m changing message under the table when they arrived via SSE. This make UX way better as there will always be reply.&lt;/p&gt;

&lt;p&gt;Take any big application. For example of user rating of movie. Many users are giving their &lt;code&gt;star&lt;/code&gt; ratings. And I am updating average stars based on that. So, here I am not blocking user and allowing them to continue. Here, either you can change things in client or wait for SSE to come with updated message. User never bother unless and until s/he knows that his input is taken care of.&lt;/p&gt;

&lt;p&gt;Another thing is. JavaScript runs every where. OK that is Given. You can&amp;rsquo;t escape from it. But that don&amp;rsquo;t tied your hands to use it. You can use any damn thing that transpile to JavaScript. Elmish / Elm architecture push you to make big application using small isolated lego pieces. It will force you think in that direction. It may hurt in start but once your project reach considerable size then you will thank your previous self for this. And no &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;object not found&lt;/code&gt; or &lt;code&gt;function is not an object&lt;/code&gt; or &lt;code&gt;object object&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;As you have seen fable is quite more flexible in nature, and here I can joined forces with Servicestack client with it. So, I don&amp;rsquo;t even have to give specific url path to make request or decode json on this side. It just works. Without any issue.&lt;/p&gt;

&lt;p&gt;All this is great but what next&lt;/p&gt;

&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;

&lt;p&gt;There are many containers out there. But I am choosing &lt;a href=&#34;https://www.docker.com/&#34;&gt;docker here&lt;/a&gt;. I am not biased but as Docker is kind of front runner now a days. And it will make you future safe. Give or take 5-10 years. If you are just starting things out with your project and not sure about how good it will go. Run docker with &lt;a href=&#34;http://dokku.viewdocs.io/dokku/&#34;&gt;Dokku&lt;/a&gt;, if you are scaling things up then can use any docker based hosting. And for every other use cases there is &lt;a href=&#34;https://kubernetes.io/&#34;&gt;kubernetes&lt;/a&gt; . Using docker is having one &lt;code&gt;side effect&lt;/code&gt; that you are not locking your self into any vendor.&lt;/p&gt;

&lt;p&gt;My favourite development time benefit is that you don&amp;rsquo;t have to set up every environment. Once done is done. If you are still not using docker in &lt;em&gt;development&lt;/em&gt; pipe line, while developing your application, you are making big mistake and you should start using it. Yes, for development purpose also. Don&amp;rsquo;t forget to check in your docker file so every team member is testing / running application against same environment.&lt;/p&gt;

&lt;h1 id=&#34;fake-paket&#34;&gt;Fake Paket&lt;/h1&gt;

&lt;p&gt;All this stuff will not be possible without twin F# heros. &lt;a href=&#34;https://fake.build/&#34;&gt;Fake&lt;/a&gt; and &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;Paket&lt;/a&gt;. Everything above is good and shinny but without joining things together, it is not useful also more importantly fun. And fake and paket exactly doing that.&lt;/p&gt;

&lt;p&gt;Paket is way better package manager than nuget ever will be. And Fake is build tool that can run anything and everything.&lt;/p&gt;

&lt;p&gt;While developing this application, I had kept them running, that ran my test, server code in watch mode while fable in hot reload mode.&lt;/p&gt;

&lt;p&gt;Above things are mostly inspired / copy-pasted things from &lt;a href=&#34;https://safe-stack.github.io/&#34;&gt;SAFE stack&lt;/a&gt;. Obviously changing things as per my personal taste. And that make my development experience so great. Specially feedback loops is quite fast, that make coding more fun. No more F5, no more breaking point in JavaScript and trying to debug what the hell [object object] is?&lt;/p&gt;

&lt;p&gt;Hope you like the post. Complete code you can find at my &lt;a href=&#34;https://github.com/kunjee17/indian-chaat&#34;&gt;github repo&lt;/a&gt;. And don&amp;rsquo;t forget to read below list for other alternatives.&lt;/p&gt;

&lt;h1 id=&#34;epilogue&#34;&gt;Epilogue&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;F# - If you looking for alternative C# is good option but you should go for Q#.&lt;/li&gt;
&lt;li&gt;Server side frameworks - &lt;a href=&#34;https://suave.io/&#34;&gt;Suave&lt;/a&gt; - kind of default with SAFE, &lt;a href=&#34;https://github.com/giraffe-fsharp/Giraffe&#34;&gt;Giraffe&lt;/a&gt; if you like aspnetcore, &lt;a href=&#34;https://freya.io/&#34;&gt;Freya&lt;/a&gt; crazy fast option&lt;/li&gt;
&lt;li&gt;Honorable mention for Server Side Frameworks - &lt;a href=&#34;http://nancyfx.org/&#34;&gt;NancyFx&lt;/a&gt; - can&amp;rsquo;t miss this sweet framework&lt;/li&gt;
&lt;li&gt;Fable alternatives - ReasonML, Elm, OCaml, Pure Script, Clojure Script&lt;/li&gt;
&lt;li&gt;Elmish alternatives - React - Redux, Elm, Vue - Redux&lt;/li&gt;
&lt;li&gt;Actor Frameworks - &lt;a href=&#34;https://akka.io/&#34;&gt;Akka&lt;/a&gt;, &lt;a href=&#34;http://proto.actor/&#34;&gt;Proto-Actor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Async Framework - &lt;a href=&#34;http://hopac.github.io/Hopac/Hopac.html&#34;&gt;Hapoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fake &amp;amp; Paket alternatives - Nuget &amp;amp; Sln file if you are seriously not happy with your life&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many people from F# community I like to thank for this post. Without them this will not be possible. But personally I like to thank &lt;a href=&#34;https://twitter.com/sforkmann&#34;&gt;Steffen Forkmann&lt;/a&gt; for crating Fake and Paket. Man if you are ever coming to India, &lt;strong&gt;Chaat&lt;/strong&gt; on me.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://giphy.com/embed/dIm3qgyzenCh2&#34; width=&#34;480&#34; height=&#34;235&#34; frameBorder=&#34;0&#34; class=&#34;giphy-embed&#34; allowFullScreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=&#34;https://giphy.com/gifs/dIm3qgyzenCh2&#34;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Epic Adventure using F#</title>
      <link>http://kunjan.in/2016/12/epic-adventure-using-fsharp/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2016/12/epic-adventure-using-fsharp/</guid>
      <description>

&lt;p&gt;This article is part of &lt;a href=&#34;https://sergeytihon.wordpress.com/2016/10/23/f-advent-calendar-in-english-2016/&#34;&gt;FSAdvent 2016 calendar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This my second post of 2016. Sadly not much of writing this year. So, I need to cover up by this little longish post. So, grab your favorite coffee / tea before getting started.&lt;/p&gt;

&lt;p&gt;There is one wonderful coincidence here that both post of 2016 is based on Epic Mahabharata. If anyone interested in poem like things do check out my &lt;a href=&#34;http://kunjan.in/2016/04/my-identity/&#34;&gt;another post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;epic-mahabharata&#34;&gt;Epic Mahabharata&lt;/h2&gt;

&lt;p&gt;Many people heard of it but few lucky get chance to read it. Or even fewer know thing in detail about it. As per global source of truth &lt;a href=&#34;https://en.wikipedia.org/wiki/Mahabharata&#34;&gt;Wikipedia&lt;/a&gt; It is &amp;ldquo;longest &lt;em&gt;poem&lt;/em&gt; ever written&amp;rdquo; in human history. It has around 1.8 million words in total. It is roughly 10 times the length of Iliad and Odyseey combined.&lt;/p&gt;

&lt;p&gt;So, what is there in it? We can say everything. Love stories to stories about war to stories about revenge. Philosophy to military tactics. Policies on tax, rules of espionage, watch over enemies and how to find the most able people and make them ministers. Theory karma which is part of Gita,  which is part of Mahabharata. Yog (not to confuse with physical Yoga people do) explained in Mahabharata and so do life, death and life after death. A tale where God not solve problems for you but guide you to solution, enable you face the problems. A story where God is not forefather but a friend who is always there for you.&lt;/p&gt;

&lt;p&gt;A story where even God accept curse with due respect given by a mother. A story where story teller him self not only narrate the story but also integral part of it. A tale stays same but meaning of it keep changing to every reader. A story which has spiral of different small stories consisting further different stories. A infinite source of knowledge, wisdom and fun.&lt;/p&gt;

&lt;p&gt;I can go on and on; but let&amp;rsquo;s come back to F#.&lt;/p&gt;

&lt;h2 id=&#34;natural-language-processing&#34;&gt;Natural Language Processing&lt;/h2&gt;

&lt;p&gt;Understanding the human language, words and sentiments always is exciting. Specially using your favourite programming language. Processing old epic books is always fun, as it not only tells about history / mythology but take back to your heritage and culture. So, This part is from my Mentorship program (more details at the end). An article born from &lt;em&gt;home work&lt;/em&gt; I got recently.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know the complexity level of it. It totally depends on reader. But results are indeed too good.&lt;/p&gt;

&lt;h2 id=&#34;let-the-fun-begin&#34;&gt;Let the fun Begin&lt;/h2&gt;

&lt;p&gt;First thing is to find out source in English (As it is easy to compare with data sets.). &lt;a href=&#34;https://www.gutenberg.org&#34;&gt;Project Gutenberg&lt;/a&gt; is good place to find some license free text. If you like to do code with this article then get your favourite book from site or you can always download if &lt;a href=&#34;https://github.com/kunjee17/mahabharata/tree/master/txt_data&#34;&gt;from my project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That is whole Mahabharata in four text files. So, I did some manual labour to separate the books from it. You can find them &lt;a href=&#34;https://github.com/kunjee17/mahabharata/tree/master/books&#34;&gt;here&lt;/a&gt;. There are total 18 books (sub books are not separated).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with simple File IO.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    let booknos = [|
                &amp;quot;01&amp;quot;;
                &amp;quot;02&amp;quot;;
                &amp;quot;03&amp;quot;;
                &amp;quot;04&amp;quot;;
                &amp;quot;05&amp;quot;;
                &amp;quot;06&amp;quot;;
                &amp;quot;07&amp;quot;;
                &amp;quot;08&amp;quot;;
                &amp;quot;09&amp;quot;;
                &amp;quot;10&amp;quot;;
                &amp;quot;11&amp;quot;;
                &amp;quot;12&amp;quot;;
                &amp;quot;13&amp;quot;;
                &amp;quot;14&amp;quot;;
                &amp;quot;15&amp;quot;;
                &amp;quot;16&amp;quot;;
                &amp;quot;17&amp;quot;;
                &amp;quot;18&amp;quot;
                |]

    let trms = booknos.[0] |&amp;gt;  (fun x -&amp;gt;
            Path.Combine(__SOURCE_DIRECTORY__, &amp;quot;..&amp;quot;, &amp;quot;books/&amp;quot;+ x + &amp;quot;.txt&amp;quot;) |&amp;gt; File.ReadAllLines |&amp;gt; String.concat &amp;quot; &amp;quot;
                    ) |&amp;gt; (fun y -&amp;gt; y.Split &#39; &#39;)


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s quite a lot terms for small piece of code. Now, we are one step behind to become data scientist.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s find the unique terms and frequency of them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    let uniqtrms = trms |&amp;gt; Array.countBy id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;see another line and we are done. We are now official data scientists.&lt;/p&gt;

&lt;p&gt;Go ahead and try for other books also. If you are feeling lazy you can check out &lt;a href=&#34;http://kunjan.in/mahabharata/book-details&#34;&gt;results here&lt;/a&gt; or see below.&lt;/p&gt;

&lt;p&gt;For Terms:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/terms.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For Unique Terms:
&lt;img src=&#34;http://kunjan.in/images/mahabharata/uniqueterms.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For Unique Terms per Terms
&lt;img src=&#34;http://kunjan.in/images/mahabharata/utbyterms.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What next? Let&amp;rsquo;s do the sentiment analysis of all this books and compare them with each others.&lt;/p&gt;

&lt;h2 id=&#34;sentiment-analysis&#34;&gt;Sentiment Analysis&lt;/h2&gt;

&lt;h3 id=&#34;whaaat&#34;&gt;Whaaat?&lt;/h3&gt;

&lt;p&gt;Analysis done to find out the tone of given text. Here we are having books. Basically using this we can find out that books is more joyful to read or tilted towards sadness. How many surprise elements book do have. It is useful to understand conversation, if it is more towards positive end or negative end.&lt;/p&gt;

&lt;h3 id=&#34;coding-bits&#34;&gt;Coding bits&lt;/h3&gt;

&lt;p&gt;It will make more sense while comparing.&lt;/p&gt;

&lt;p&gt;As everything else in F# here we also start with type and start putting things in it. Let&amp;rsquo;s call it Book type. Because why not.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    type SentimentInNumber = {
        Anger:float
        Anticipation:float
        Disgust:float
        Fear:float
        Joy:float
        Negative:float
        Positive:float
        Sadness:float
        Surprise:float
        Trust:float
        Word: string
    }

    type Word = {
        Term :string
        Rating : int
    }


    type Book = {
        Name : string
        Text : string
        UniqueTerms : Set&amp;lt;string&amp;gt;
        Terms : string []
        UniqueTermsWithFrequency : (string * int) []
        SentimentIndex : SentimentInNumber
        WordsRating : Word []
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, for a second keep this aside. We need more details or here data to find out sentiments. Data with which we can compare our book terms. So, we will be using two
data sets. For emotions we will be  using &lt;a href=&#34;http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm&#34;&gt;this&lt;/a&gt; and for positive / negative ratings we will be using &lt;a href=&#34;http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are what they look like.&lt;/p&gt;

&lt;p&gt;Emotion Lexicon:
&lt;img src=&#34;http://kunjan.in/images/mahabharata/sentiment.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And Word with Ratings:
&lt;img src=&#34;http://kunjan.in/images/mahabharata/posneg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Traditional way to pull data out of CSV file is &lt;code&gt;for -&amp;gt; for -&amp;gt; for&lt;/code&gt; loops. But we are in F# land, we will be using csv Type Provider. Let&amp;rsquo;s pull data out of CSV and shape it in types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;
    let sentimentCSVPath = Path.Combine(__SOURCE_DIRECTORY__, &amp;quot;..&amp;quot;,&amp;quot;data/Basic_Emotions_(size_is_proportional_to_number_of__data.csv&amp;quot;)
    type SentimentCsv = CsvProvider&amp;lt; &amp;quot;../data/Basic_Emotions_(size_is_proportional_to_number_of__data.csv&amp;quot;&amp;gt;

    let SentimentData = SentimentCsv.Load(&amp;quot;../data/Basic_Emotions_(size_is_proportional_to_number_of__data.csv&amp;quot;)

    type SentimentInNumber = {
        Anger:float
        Anticipation:float
        Disgust:float
        Fear:float
        Joy:float
        Negative:float
        Positive:float
        Sadness:float
        Surprise:float
        Trust:float
        Word: string
    }

    let sentimentCalculate (anger,anticipation, disgust,emotion,fear, joy, negative, positive, sadness, surprise, trust, word) =
        let a = {
            Anger = stringToNum anger
            Anticipation = stringToNum anticipation
            Disgust = stringToNum disgust
            Fear = stringToNum fear
            Joy = stringToNum joy
            Negative = stringToNum negative
            Positive = stringToNum positive
            Sadness = stringToNum sadness
            Surprise = stringToNum surprise
            Trust = stringToNum trust
            Word = word
        }

        match emotion with
        | Anger -&amp;gt; if a.Anger = 0. then {a with Anger = 1.} else a
        | Anticipation -&amp;gt; if a.Anticipation = 0. then {a with Anticipation = 1.} else a
        | Disgust -&amp;gt; if a.Disgust = 0. then {a with Disgust = 1. } else a
        | Fear -&amp;gt; if a.Fear = 0. then {a with Fear = 1.} else a
        | Joy -&amp;gt; if a.Joy = 0. then {a with Joy = 1.} else a
        | Negative -&amp;gt; if a.Negative = 0. then {a with Negative = 1.} else a
        | Positive -&amp;gt; if a.Positive = 0. then {a with Positive = 1.} else a
        | Sadness -&amp;gt; if a.Sadness = 0. then {a with Sadness = 1.} else a
        | Surprise -&amp;gt; if a.Surprise = 0. then {a with Surprise = 1.} else a
        | Trust -&amp;gt; if a.Trust = 0. then {a with Trust = 1.} else a
        | _ -&amp;gt; a

    let allSentimentsInNumber =
        SentimentData.Rows
        |&amp;gt; Seq.map (fun row -&amp;gt;
            sentimentCalculate (
                    row.Anger,
                    row.Anticipation,
                    row.Disgust,
                    row.Emotion,
                    row.Fear,
                    row.Joy,
                    row.Negative,
                    row.Positive,
                    row.Sadness,
                    row.Surprise,
                    row.Trust,
                    row.Word
                    ))
    let SentimentWordsSet = allSentimentsInNumber |&amp;gt; Seq.map (fun row -&amp;gt; row.Word) |&amp;gt; set

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the thing about this data. Emotion column is also specifying the emotion, not always but they are there. So, we need them too. That is reason for that extra calcution we are doing. Here for every emotion found we are adding 1 else it is 0.&lt;/p&gt;

&lt;p&gt;If you can see I am not comparing with string but with concrete F# term. It is because in data we are having &amp;ldquo;anticip&amp;rdquo; for &amp;ldquo;anticipation&amp;rdquo;. Now, in future if we add another data to this collection and they have &amp;ldquo;anticipation&amp;rdquo; then it will add extra case for same result. So, it would be better to encapsulate them away. And clean way to do that using Active patterns.&lt;/p&gt;

&lt;p&gt;Here is missing piece of code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    //Active Pattern for Sentiments
    let (|Anger|_|) input =
        if input = &amp;quot;anger&amp;quot; then Some Anger else None
    let (|Anticipation|_|) input =
        if input = &amp;quot;anticip&amp;quot; then Some Anticipation else None
    let (|Disgust|_|) input =
        if input = &amp;quot;disgust&amp;quot; then Some Disgust else None
    let (|Fear|_|) input =
        if input = &amp;quot;fear&amp;quot; then Some Fear else None
    let (|Joy|_|) input =
        if input = &amp;quot;joy&amp;quot; then Some Joy else None
    let (|Negative|_|) input =
        if input = &amp;quot;negative&amp;quot; then Some Negative else None
    let (|Positive|_|) input =
        if input = &amp;quot;positive&amp;quot; then Some Positive else None
    let (|Sadness|_|) input =
        if input = &amp;quot;sadness&amp;quot; then Some Sadness else None
    let (|Surprise|_|) input =
        if input = &amp;quot;surprise&amp;quot; then Some Surprise else None
    let (|Trust|_|) input =
        if input = &amp;quot;trust&amp;quot; then Some Trust else None

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we are having more than 7 cases, we will be using partial Active Patterns and join them in match statement.&lt;/p&gt;

&lt;p&gt;Same can be done for word with Positive and Negative ratings.&lt;/p&gt;

&lt;p&gt;Here is code for same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    type Word = {
        Term :string
        Rating : int
    }

    let WordList =
        Path.Combine(__SOURCE_DIRECTORY__, &amp;quot;..&amp;quot;, &amp;quot;data/AFINN/&amp;quot;+ &amp;quot;AFINN-111&amp;quot; + &amp;quot;.txt&amp;quot;)
        |&amp;gt; File.ReadAllLines
        |&amp;gt; Array.map (fun x -&amp;gt;
                        x.Split &#39;\t&#39; |&amp;gt; (fun b -&amp;gt; {Term = b.[0]; Rating = System.Int32.Parse b.[1]})
                        )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great. Now stage is set to convert books made of terms to books made of numbers. Let&amp;rsquo;s create for one book and then we will loop it for our array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    let create (bookname:string) (booktext :string) =
        let terms = Terms booktext
        let termsCount = terms.Length |&amp;gt; float
        let termsWithFrequency = UniqueTermsWithFrequency terms
        let uniqueTerms = termsWithFrequency |&amp;gt; Array.map (fun (x,_) -&amp;gt; x)

        {
            Name = bookname
            Text = booktext
            UniqueTerms = uniqueTerms |&amp;gt; set
            Terms = terms
            UniqueTermsWithFrequency = termsWithFrequency
            SentimentIndex =
                let commonEmotions = uniqueTerms |&amp;gt; set |&amp;gt; Set.intersect SentimentWordsSet
                let commonEmotionsCount = termsWithFrequency
                                            |&amp;gt; Array.filter(fun (x,_) -&amp;gt; commonEmotions.Contains x)
                                            |&amp;gt; Array.map (fun (_,y) -&amp;gt; y) |&amp;gt; Array.sum |&amp;gt; float
                let commonEmotionsInNumber = allSentimentsInNumber |&amp;gt; Seq.filter (fun x -&amp;gt; commonEmotions.Contains x.Word) |&amp;gt; Seq.toArray
                let r = commonEmotionsInNumber |&amp;gt; Array.fold (SentimentSum bookname) ZeroSentiment

                { r with
                    Anger = (r.Anger/commonEmotionsCount) * 100.
                    Anticipation = (r.Anticipation/commonEmotionsCount) * 100.
                    Disgust =(r.Disgust/commonEmotionsCount) * 100.
                    // Emotion = (r.Emotion)
                    Fear = (r.Fear/commonEmotionsCount) * 100.
                    Joy = (r.Joy/commonEmotionsCount) * 100.
                    Negative = (r.Negative/commonEmotionsCount) * 100.
                    Positive = (r.Positive/commonEmotionsCount) * 100.
                    Sadness = (r.Sadness/commonEmotionsCount) * 100.
                    Surprise = (r.Surprise/commonEmotionsCount) * 100.
                    Trust = (r.Trust/commonEmotionsCount) * 100.
                }
            WordsRating =
                let commonWords =
                    WordList
                    |&amp;gt; Array.map (fun x -&amp;gt; x.Term)
                    |&amp;gt; set
                    |&amp;gt; Set.intersect (uniqueTerms |&amp;gt; set)
                WordList
                |&amp;gt; Array.filter (fun a -&amp;gt; commonWords.Contains a.Term)
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single function and it&amp;rsquo;s done. That&amp;rsquo;s it. What we are doing in that? Creating our Book type.&lt;/p&gt;

&lt;p&gt;Terms and Unique Terms were extracted away.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    let Terms (input:string)=
            input
            |&amp;gt; (fun x -&amp;gt; x.Split &#39; &#39;)
            |&amp;gt; Array.map (removeSpecialChars &amp;gt;&amp;gt; (fun x -&amp;gt; x.Trim()))
            |&amp;gt; Array.filter (fun x -&amp;gt; x &amp;lt;&amp;gt; &amp;quot;&amp;quot;)

    let UniqueTermsWithFrequency (input:string[])=
            input
            |&amp;gt; Array.countBy id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Little bit complicated looking part is where we are trying to find &lt;code&gt;Sentiment Index&lt;/code&gt; for book. So, first step is clean up the word set. That is the reason we are using unique terms. All terms are not present in data set we are having. So, there is need to take common terms. Again no more loops and conditions. They are two sets we need common terms so just intersect it. One line without performance over head. Now find out Sentiment details for that word and to get for book just fold it and do the sum of it. Done.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    let ZeroSentiment = {
        Anger = 0.
        Anticipation = 0.
        Disgust =0.
        Fear = 0.
        Joy = 0.
        Negative = 0.
        Positive = 0.
        Sadness = 0.
        Surprise = 0.
        Trust = 0.
        Word = String.Empty
    }

    let SentimentSum word a b =
        {
            Anger = a.Anger + b.Anger
            Anticipation = a.Anticipation + b.Anticipation
            Disgust = a.Disgust + b.Disgust
            // Emotion = a.Emotion + b.Emotion
            Fear = a.Fear + b.Fear
            Joy = a.Joy + b.Joy
            Negative = a.Negative + b.Negative
            Positive = a.Positive + b.Positive
            Sadness = a.Sadness + b.Sadness
            Surprise = a.Surprise + b.Surprise
            Trust = a.Trust + b.Trust
            Word = word
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we are having all the data in memory. In our case in FSI / REPL.&lt;/p&gt;

&lt;p&gt;As we are official data scientist we required that we see things in Graph format. So, first let&amp;rsquo;s conver things to JSON and write to disk so we can use it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    module Utility =
        let JsonDropPath name =
            Path.Combine (__SOURCE_DIRECTORY__, &amp;quot;..&amp;quot;, &amp;quot;docs/js/&amp;quot; + name + &amp;quot;.json&amp;quot;)
        let dataToJSONFile (fileName : string)(data :&#39;a) =
            let path = JsonDropPath fileName
            use writer = new StreamWriter(path)
            let txt = data |&amp;gt; Compact.serialize
            writer.WriteLine (txt)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I am using &lt;a href=&#34;https://github.com/Microsoft/fsharplu/wiki/fsharplu.json&#34;&gt;Fsharplu.Json&lt;/a&gt;, do check their &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/12/13/project-springfield-a-cloud-service-built-entirely-in-f/&#34;&gt;project story&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, once JSON is ready we can easily use to show in graph using any graph library.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here I did little cheating and wrote some dirty JavaScript. A good practise would be to write code in &lt;a href=&#34;http://fable.io/&#34;&gt;Fable&lt;/a&gt;. So, I will not show code of JavaScript part.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find book wise graphs &lt;a href=&#34;http://kunjan.in/mahabharata/bookwise-sentiment&#34;&gt;here&lt;/a&gt; and transformed analysis &lt;a href=&#34;http://kunjan.in/mahabharata/sentiment-wise&#34;&gt;here&lt;/a&gt; which is sentiment wise. Or Check out few of them below.&lt;/p&gt;

&lt;p&gt;Book Wise:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/karnaparv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/mahaprasthanikaparv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/shalyaparv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sentiment Wise:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/anger.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/joy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/trust.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Same can be done for positive and negative word set. (DYI for you.)&lt;/p&gt;

&lt;h2 id=&#34;reading-the-graphs-experience&#34;&gt;Reading the Graphs &amp;amp; Experience&lt;/h2&gt;

&lt;p&gt;One thing needed to be understand here. Data set are created by human, code is written by human and code is executed by dumb computer. So, there is and always will be little bit manual tweaking. As language is topic with perception. One need to understand culture / history of those words from where they are coming. Graphs should be read in that context only. Let me put an example here.&lt;/p&gt;

&lt;p&gt;Check out word frequency graph &lt;a href=&#34;http://kunjan.in/mahabharata/word-frequency&#34;&gt;here&lt;/a&gt;. Pick any graph. Here I am taking three graphs to compare.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/w1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/w2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/mahabharata/w3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Great&amp;rdquo; would be always first. And &amp;ldquo;Fire&amp;rdquo; will come in last five always. In normal western literature &amp;ldquo;Great&amp;rdquo; word used as adverb for person or thing. But in Indian or Mahabharata context they use it to address someone. Like
&lt;code&gt;Hey, Great worrier Arjuna&lt;/code&gt;. A poetic way of saying things. Looks good but also make word totally useless in context of understanding phrase. This issue can be solved with Inverse Document Frequency but again it is an extra effort. Same goes for word &amp;ldquo;Fire&amp;rdquo;. It is having negative value in normal context but in this specific context it is not that negative. Fire God and Fire it self (yagna) are positive. It is very much contextual.&lt;/p&gt;

&lt;p&gt;But again generating graph is much more &lt;em&gt;data sciencey&lt;/em&gt; to explain.&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;

&lt;p&gt;Next step would be doing more detailed analysis of this Epic. Compare number / analysis with original context of books. Try to push number as near as possible to words. And probably extract some good NLP library from it.&lt;/p&gt;

&lt;p&gt;All books are divided in sub-books &lt;a href=&#34;http://kunjan.in/mahabharata/index&#34;&gt;telling different stories&lt;/a&gt;. Wiki links are added in Table list. If you are interested then check them out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kunjee17/mahabharata/blob/master/Mahabharata/Lesson1.fsx&#34;&gt;Complete script file for this article is available over github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download your favourite books and have fun with graphs.&lt;/p&gt;

&lt;h2 id=&#34;thanks-note&#34;&gt;Thanks Note&lt;/h2&gt;

&lt;p&gt;Special Thanks to people without whom this project may not exist.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rachelree.se/&#34;&gt;Rachel Reese&lt;/a&gt; - For arranging this season of &lt;a href=&#34;http://fsharp.org/mentorship/&#34;&gt;Mentorship program&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mentorship program : In simple words. It is a program where Mentor and Mentee are tagged with each other. And they have hour / week to teach / learn some topic specific to F#. As highly technical people things looks little old school but the effect that flesh and blood can create nothing else can. No books or no recorded videos. 45 - 60 minutes can cover more than one can cover in month or two using deal material. It is always good to have someone there alive in front of you whom you can ask questions. Again that is all my preference and what I like about this program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.roundcrisis.com/&#34;&gt;Andrea&lt;/a&gt; - For last season of Mentorship program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;My lovely fiancée for not only allowing me but also encouraging me to give extra time to this.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/tirthpandya&#34;&gt;Saheb&lt;/a&gt; to be my phone a friend for any kind of machine learning and data science queries.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://devdutt.com/&#34;&gt;Devdutt&lt;/a&gt;, my current favourite mythologist. Author of two of my favourite books &lt;a href=&#34;http://devdutt.com/books/jaya-3.html&#34;&gt;Jaya&lt;/a&gt; and &lt;a href=&#34;http://devdutt.com/books/my-gita.html&#34;&gt;My Gita&lt;/a&gt; in this genre&lt;/p&gt;

&lt;h2 id=&#34;note-to-my-mentor&#34;&gt;Note to my Mentor&lt;/h2&gt;

&lt;p&gt;Words can&amp;rsquo;t explain how much grateful I am to have &lt;a href=&#34;http://evelinag.com/&#34;&gt;Evelina Gabasova&lt;/a&gt; as my mentor or may be guru would make much more sense in current context. After a long time I can have kid&amp;rsquo;s curiosity and innocence to ask anything and everything to her. And she is always there with answer and ever smiling face. Always pushing extra mile to beat the time zone differences.&lt;/p&gt;

&lt;p&gt;In Mahabharata, Krishna narrate Gita to Arjuna in middle of war field; empowering him with eternal knowledge. Just like that,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey, &lt;strong&gt;Great Evelina&lt;/strong&gt;, I am no Arjuna but you are always been my Krishne. Guiding my way in the flood of data. It is always good to have you around. Be as mentor and as friend. Please be there always.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;closing&#34;&gt;Closing&lt;/h2&gt;

&lt;p&gt;I like to close with few of my favourite picture describing war moments of Mahabharata&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Krishna narrating Gita to Arjuna&lt;/strong&gt;
&lt;img src=&#34;http://kunjan.in/images/mahabharata/m1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Krishna driving Arjuna in war field&lt;/strong&gt;
&lt;img src=&#34;http://kunjan.in/images/mahabharata/m3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Krishna, Arjuna and Bhisma three great warriors but helpless in front of time (situation)&lt;/strong&gt;
&lt;img src=&#34;http://kunjan.in/images/mahabharata/m2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Identity</title>
      <link>http://kunjan.in/2016/04/my-identity/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2016/04/my-identity/</guid>
      <description>&lt;p&gt;Few words dedicated to people who made me who I am right now, my teachers. I know few of them personally and few others I am yet to meet in person. But they are still there always for me. Guiding me and helping me whenever and wherever I need. Words are not enough to say Thanks but still here with my small try&lt;/p&gt;

&lt;p&gt;Here is original Gujarati Version&lt;/p&gt;

&lt;p&gt;જેને કોઈ ઓળખની જરૂર નથી&lt;br /&gt;
જેની પ્રતિષ્ઠા ચંદ્રની જેમ વિશ્વમાં વ્યાપ છે&lt;br /&gt;
એવા અર્જુનની ઓળખ પૂછી કોઈએ&lt;/p&gt;

&lt;p&gt;ના કીધું એણે કે હું અર્જુન&lt;br /&gt;
ના કીધું સર્વશ્રેષ્ઠ ધનુર્ધર&lt;br /&gt;
ના કીધું પાંડવ ના કોન્તેય&lt;br /&gt;
ના કહ્યું એણે કે મારી ઓળખ તો મારા દસ નામ&lt;br /&gt;
ના કૃષ્ણનો મિત્ર કહ્યો, ના ઇન્દ્ર નો વંશજ&lt;br /&gt;
ના એની ઓળખ ગાંડીવે આપી, ના પાશુપત અસ્ત્રએ&lt;br /&gt;
હર સમય હર સંજોગમાં એણે એજ કહ્યું કે&lt;br /&gt;
હું મારા ગુરુનો શિષ્ય અને એજ મારી ઓળખ&lt;/p&gt;

&lt;p&gt;એ અર્જુન તો મોટોભા થયો&lt;br /&gt;
એની સામે મારી શું વિસાત ને શું ઓળખ&lt;br /&gt;
પણ મને જો કોઈ મારી ઓળખ પૂછી લો&lt;br /&gt;
તો હું ભી એજ કહું કે&lt;br /&gt;
હું મારા ગુરુનો શિષ્ય અને એજ મારી ઓળખ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And here it is, in English (courtesy Dharman Dave)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;He who doesn&amp;rsquo;t need an introduction&lt;br /&gt;
He whose prestige is known to the world like the moon&lt;br /&gt;
Someone asked that &lt;a href=&#34;https://en.wikipedia.org/wiki/Arjuna&#34;&gt;Arjun&lt;/a&gt; his identity&lt;/p&gt;

&lt;p&gt;Neither did he say I am (the famous) Arjun&lt;br /&gt;
Nor did he say I am the great archer (best of the best)&lt;br /&gt;
Neither did he say he was the son of Pandu&lt;br /&gt;
Nor the son of Kunti&lt;br /&gt;
He also didn’t say, “My identity is my ten names”&lt;br /&gt;
Neither did he say, “I’m a friend of (Lord) Krishna’s“&lt;br /&gt;
Nor a descendent of (God) Indra
Neither was he identified by Gandiv (indestructible bow)&lt;br /&gt;
Nor by the Pashupat weapon (destroyer arrow)&lt;br /&gt;
Every time and under all circumstances he said the same thing,&lt;br /&gt;
“I am a student of my teacher and that is my only identity”&lt;/p&gt;

&lt;p&gt;That Arjun is a legend&lt;br /&gt;
I am nothing compared to him, so is my identity&lt;br /&gt;
But if someone asks for my identity&lt;br /&gt;
I would also say the exact same thing,&lt;br /&gt;
“I am a student of my teacher and that is my only identity”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1729</title>
      <link>http://kunjan.in/2015/12/1729/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/12/1729/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;This post is part of &lt;a href=&#34;https://sergeytihon.wordpress.com/2015/10/25/f-advent-calendar-in-english-2015/&#34;&gt;F# Advent&lt;/a&gt; calender. Thanks &lt;a href=&#34;https://twitter.com/sergey_tihon&#34;&gt;Sergey Tihon&lt;/a&gt; for arranging this and giving me chance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First I like to clarify that this was &lt;em&gt;not&lt;/em&gt; my original choice for FSAdvent calender. I was going to write long post about web, AKKA, api and real time system. My current working area. But this time&amp;rsquo;s calender entries are reaching new level and dimension. And recent &lt;a href=&#34;http://evelinag.com/blog/2015/12-15-star-wars-social-network/index.html#.VnK_aRV97IV&#34;&gt;post&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/evelgab&#34;&gt;Evelina Gabasova&lt;/a&gt; is kind of reason behind change. Do read the post and you may like to re-watch &lt;strong&gt;Star Wars&lt;/strong&gt; series. Evelina you are super awesome. And post was too good.&lt;/p&gt;

&lt;p&gt;So, why &lt;strong&gt;&lt;em&gt;1729&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;I have special love for Mathematics. Unluckily I never got chance to take formal mathematics training. I&amp;rsquo;m an engineer so know things here and there to solve the problem. May be more than others for Physics and Mathematics just because of my love. It is so much fun doing them.&lt;/p&gt;

&lt;p&gt;In our side of country if you are scoring good marks in School either you become doctor or if little less then engineer. Normally there is no other choices. Hope you got the point why I&amp;rsquo;m engineer (mine was little too less). But if you ask a name of well known gifted mathematician from India first name come is &lt;a href=&#34;https://en.wikipedia.org/wiki/Srinivasa_Ramanujan&#34;&gt;Srinivasa Ramanujan&lt;/a&gt;. And we have a exam series on his name. It is way tough, I still remember that I prepared and never gather enough guts to give one. Damn afraid of failing. But my senior and first leaving mathematics role model my senior in school &lt;a href=&#34;http://www.pubfacts.com/author/Vithal+Rangarajan&#34;&gt;Dr.Vithal Rangarajan&lt;/a&gt; scored 2nd rank and joined Medicine. Yet, my another friend &lt;a href=&#34;https://twitter.com/path_to_parth&#34;&gt;Dr.Parth Ganatra&lt;/a&gt; same story. You mostly getting gist why we are having rare Ramanujans in India. Because most of them become Doctors.&lt;/p&gt;

&lt;p&gt;Enough of back ground noise. Let&amp;rsquo;s have some fun with numbers. You can check out wiki page for the story of &lt;strong&gt;&lt;em&gt;1729&lt;/em&gt;&lt;/strong&gt; number. It is the smallest number expressible as the sum of two cubes in two different ways.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ok, that is good. But I don&amp;rsquo;t have enough brain power to cross check that. And if that is smallest which are others?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, I decided to find out by self. And at midnight I started working on this.&lt;/p&gt;

&lt;p&gt;My first try was going to question form the result. But for some reason &lt;code&gt;Math.Floor (1728.0 ** (1.0/3.0))&lt;/code&gt; is resulting in &lt;code&gt;11.0&lt;/code&gt;. I have no idea why. It should come &lt;code&gt;12.0&lt;/code&gt;. Then I thought how he has arrived to this number. It is smallest so he must have started from &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;F# gurus can you please tell me why &lt;code&gt;1728.0 ** (1.0/3.0) = 12.0 //false&lt;/code&gt; ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is code snippet.  I start with sequence of numbers and cube it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let posNum = seq {1..101}

let cube x = x * x * x 

let cubeposNum = 
    posNum 
    |&amp;gt; Seq.map (fun x -&amp;gt; (x, cube x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have returned tuple instead of cube result so I can use it afterwords in visualizing data.&lt;/p&gt;

&lt;p&gt;Now, its time to find out total combinations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let totalCombination = 
    cubeposNum 
    |&amp;gt; Seq.map (fun (a,b) -&amp;gt; cubeposNum |&amp;gt; Seq.map (fun (x,y) -&amp;gt; (a,x,b+y)))
    |&amp;gt; Seq.concat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It gives all the possible combinations numbers. Again in tuple I am returning result and numbers that are being cubed and added. Same reason for display purpose.&lt;/p&gt;

&lt;p&gt;Now, time for truth.&lt;/p&gt;

&lt;p&gt;Here is final result&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let finalResult =
    totalCombination
    |&amp;gt; Seq.countBy (fun (x,y,z) -&amp;gt; z)
    |&amp;gt; Seq.filter (fun (x,y) -&amp;gt; y &amp;gt;= 4)
    |&amp;gt; Seq.map (fun (x,y) -&amp;gt; x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will return Sequence of numbers fulfilling above condition. if you are wondering for &lt;code&gt;y&amp;gt;=4&lt;/code&gt; then 4 is because (1,2,9) is same as (2,1,9). As I need two distinct pair, I having four pair. I did have used greater than 4 but couldn&amp;rsquo;t found any pair bigger than 4 for given set.&lt;/p&gt;

&lt;p&gt;Time for doing some analysis of numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let dirtyHack (inputSeq)=
    let a = inputSeq |&amp;gt; Seq.item 0
    let b = inputSeq |&amp;gt; Seq.item 1
    let c = inputSeq |&amp;gt; Seq.item 2
    (a, b, c)

let pairValues =
    finalResult 
    |&amp;gt; Seq.map (fun x -&amp;gt; totalCombination |&amp;gt; Seq.filter (fun (a,b,c) -&amp;gt; c = x ))
    |&amp;gt; Seq.map (fun a -&amp;gt; a |&amp;gt; Seq.map (fun (x,y,z) -&amp;gt; seq[x;y;z] |&amp;gt; Seq.sort |&amp;gt; dirtyHack))
    |&amp;gt; Seq.map (fun x -&amp;gt; x |&amp;gt; Seq.distinct)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will give Sequence of Sequences which contains tuple of numbers. Where tuple is in form of &lt;code&gt;(a , b, a^3 + b^3)&lt;/code&gt;. &lt;em&gt;Dirty hack&lt;/em&gt; part I couldn&amp;rsquo;t get it right so I will be grateful if someone can provide better solution in that part.&lt;/p&gt;

&lt;p&gt;We have all the things. It&amp;rsquo;s time to put data to view.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//form crazyness - a copy paste from 2010 code :P

let form = new Form(Visible = true, Text = &amp;quot;A Simple F# Form&amp;quot;,
                    TopMost = true, Size = Size(600,600))

let data = new DataGridView(Dock = DockStyle.Fill, Text = &amp;quot;Hardy–Ramanujan number&amp;quot;,
                            Font = new Font(&amp;quot;Lucida Console&amp;quot;,12.0f),
                            ForeColor = Color.DarkBlue
                            )


form.Controls.Add(data)

data.DataSource &amp;lt;- (pairValues |&amp;gt; Seq.concat |&amp;gt; Seq.sortBy (fun (x,y,z) -&amp;gt; z) |&amp;gt; Seq.toArray)
data.Columns.[0].Width &amp;lt;- 200
data.Columns.[1].Width &amp;lt;- 200
data.Columns.[2].Width &amp;lt;- 200

data.Columns.[0].HeaderText &amp;lt;- &amp;quot;a&amp;quot;
data.Columns.[1].HeaderText &amp;lt;- &amp;quot;b&amp;quot;
data.Columns.[2].HeaderText &amp;lt;- &amp;quot;(a^3 + b^3)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearing up the data showing up in grid view. Below are screen shots of complete data.
&lt;img src=&#34;http://kunjan.in/images/1729Form1.PNG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://kunjan.in/images/1729Form2.PNG&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://kunjan.in/images/1729Form3.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Looks good.&lt;/p&gt;

&lt;p&gt;Put on chart to see where data is moving.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let taxicabnumbers = pairValues 
                     |&amp;gt; Seq.concat 
                     |&amp;gt; Seq.sortBy (fun (x,y,z) -&amp;gt; z) 
                     |&amp;gt; Seq.map (fun (x,y,z) -&amp;gt; z) 
                     |&amp;gt; Seq.distinct

Chart.Point (taxicabnumbers,&amp;quot;TaxiCabNumbers&amp;quot;,&amp;quot;TaxiCab Number&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/1729Chart1.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;above chart is showing distribution of result of numbers which are fulfilling above condition.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let taxicabnumbersX = pairValues 
                     |&amp;gt; Seq.concat 
                     |&amp;gt; Seq.sortBy (fun (x,y,z) -&amp;gt; z) 
                     |&amp;gt; Seq.map (fun (x,y,z) -&amp;gt; (x,z)) 


Chart.Point (taxicabnumbersX,&amp;quot;TaxiCabNumbersX&amp;quot;,&amp;quot;TaxiCab Number in ref to X&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/1729Chart2.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;above chart is showing distribution in compare to number X&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let taxicabnumbersY = pairValues 
                     |&amp;gt; Seq.concat 
                     |&amp;gt; Seq.sortBy (fun (x,y,z) -&amp;gt; z) 
                     |&amp;gt; Seq.map (fun (x,y,z) -&amp;gt; (y,z)) 


Chart.Point (taxicabnumbersY,&amp;quot;TaxiCabNumbersY&amp;quot;,&amp;quot;TaxiCab Number in ref to Y&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/1729Chart3.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;above chart is showing distribution in compare to number Y&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Chart.Combine[
    Chart.Point(taxicabnumbersX, &amp;quot;TaxiCabNumbersX&amp;quot;)
    Chart.Point(taxicabnumbersY, &amp;quot;TaxiCabNumbersY&amp;quot;)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://kunjan.in/images/1729Chart4.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;above chart is showing both X,Y. Here, X and Y is pretty much interchangeable.&lt;/p&gt;

&lt;p&gt;Code is not that good. But F# makes it pretty easy to work with. I will not bash any other language or style of programming today. As it is my *&lt;strong&gt;BirthDay&lt;/strong&gt; today (1712 was pretty boring number and so I took 1729. :P ). But you can make it out. How, easy it can be.&lt;/p&gt;

&lt;p&gt;Ramanujan is having many other interesting formula that can be proved and analyst same way. One of them I personally like is &lt;a href=&#34;https://en.wikipedia.org/wiki/Partition_(number_theory), but may be next time. At his time we don&#39;t that much computing power or programming language to solve this type of problems. Or even prove them. How, he did it. No one knows. (I doubt he must be more functional. ;&#34;&gt;Partition Number Theory&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;I will really appreciate any input for code. I know it is pretty poor in quality. &lt;a href=&#34;https://gist.github.com/kunjee17/6965af56a3821ad2d850&#34;&gt;Gist&lt;/a&gt; is here. I love to have comments and PR. I will update my code/blog accordingly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Special request. It will be great if someone can compress the code that can be tweeted to &lt;a href=&#34;https://twitter.com/fsibot&#34;&gt;fsibot&lt;/a&gt; and it will return 1729.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for wonderful and supporting community.  &lt;strong&gt;Merry Christmas and Happy New Year&lt;/strong&gt; to all.&lt;/p&gt;

&lt;h2 id=&#34;update1&#34;&gt;Update1&lt;/h2&gt;

&lt;p&gt;Special thanks to &lt;a href=&#34;https://twitter.com/StachuDotNet&#34;&gt;Stachu Korick&lt;/a&gt; complete logic comes in single tweet. Here it is.
&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/fsibot&#34;&gt;@fsibot&lt;/a&gt; seq{for el1 in [1..99] do for el2 in [1..99] do yield el1*el1*el1+el2*el2*el2}|&amp;gt;Seq.countBy(fun z-&amp;gt;z)|&amp;gt;Seq.find(fun(_,y)-&amp;gt;y&amp;gt;=4)|&amp;gt;fst&lt;/p&gt;&amp;mdash; Stachu Korick (@StachuDotNet) &lt;a href=&#34;https://twitter.com/StachuDotNet/status/677942581645455360&#34;&gt;December 18, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is the reason I love F# community so much.&lt;/p&gt;

&lt;h2 id=&#34;update2&#34;&gt;Update2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/StachuDotNet&#34;&gt;Stachu Korick&lt;/a&gt; is not stopping at all. Here is second version more legitimate one from him.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/fsibot&#34;&gt;@fsibot&lt;/a&gt; &amp;#10;seq{for a in [1..99] do for b in [1..99] do yield (a*a*a)+(b*b*b)}&amp;#10; |&amp;gt;Seq.countBy(fun z-&amp;gt;z)&amp;#10; |&amp;gt;Seq.find(fun(_,y)-&amp;gt;y&amp;gt;=4)&amp;#10; |&amp;gt;fst&lt;/p&gt;&amp;mdash; Stachu Korick (@StachuDotNet) &lt;a href=&#34;https://twitter.com/StachuDotNet/status/678059350317998080&#34;&gt;December 19, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is fun part with F# and in general functional language. You make thing work with ugly and &lt;strong&gt;simple&lt;/strong&gt; code. And then re-factor it with beautiful and &lt;strong&gt;simple&lt;/strong&gt; code.&lt;/p&gt;

&lt;h2 id=&#34;update3&#34;&gt;Update3&lt;/h2&gt;

&lt;p&gt;Oh man things are getting better (shorter.) Have a look at &lt;a href=&#34;https://twitter.com/brandewinder&#34;&gt;Mathias Brandewinder&lt;/a&gt; version&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/fsibot&#34;&gt;@fsibot&lt;/a&gt; let f x=x*x*x in[for x in 1..99 do for y in 1..99-&amp;gt;f x+f y]|&amp;gt;Seq.countBy id|&amp;gt;Seq.find((snd&amp;gt;&amp;gt;(=)4))|&amp;gt;fst // &lt;a href=&#34;https://twitter.com/StachuDotNet&#34;&gt;@StachuDotNet&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mathias Brandewinder (@brandewinder) &lt;a href=&#34;https://twitter.com/brandewinder/status/678062630456582144&#34;&gt;December 19, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Sweeeeettttt :)&lt;/p&gt;

&lt;h2 id=&#34;update4&#34;&gt;Update4&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/yukitos&#34;&gt;Yukitos&lt;/a&gt; made it even shorter. Hufff this is getting more and more fun.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/fsibot&#34;&gt;@fsibot&lt;/a&gt; [for x in 1..99 do for y in 1..99-&amp;gt;pown x 3+pown y 3]|&amp;gt;Seq.countBy id|&amp;gt;Seq.find((snd&amp;gt;&amp;gt;(=)4))|&amp;gt;fst&amp;#10;// :) &lt;a href=&#34;https://twitter.com/brandewinder&#34;&gt;@brandewinder&lt;/a&gt; &lt;a href=&#34;https://twitter.com/StachuDotNet&#34;&gt;@StachuDotNet&lt;/a&gt;&lt;/p&gt;&amp;mdash; yukitos (@yukitos) &lt;a href=&#34;https://twitter.com/yukitos/status/678151906934435840&#34;&gt;December 19, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;update5&#34;&gt;Update5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/tomaspetricek&#34;&gt;Tomas Petricek&lt;/a&gt; make it even shorter. Beat this&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/fsibot&#34;&gt;@fsibot&lt;/a&gt; Seq.countBy id [for x in 0..9800-&amp;gt;pown(1+x/99)3+pown(1+x%99)3]|&amp;gt;Seq.find(snd&amp;gt;&amp;gt;(=)4)|&amp;gt;fst//&lt;a href=&#34;https://twitter.com/yukitos&#34;&gt;@yukitos&lt;/a&gt; &lt;a href=&#34;https://twitter.com/brandewinder&#34;&gt;@brandewinder&lt;/a&gt; &lt;a href=&#34;https://twitter.com/StachuDotNet&#34;&gt;@StachuDotNet&lt;/a&gt; -9 ;)&lt;/p&gt;&amp;mdash; Tomas Petricek (@tomaspetricek) &lt;a href=&#34;https://twitter.com/tomaspetricek/status/678258388787183617&#34;&gt;December 19, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;update6&#34;&gt;Update6&lt;/h2&gt;

&lt;p&gt;Above version is beaten already. New, record is by &lt;a href=&#34;https://twitter.com/ScottWlaschin&#34;&gt;Scott Wlaschin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/fsibot&#34;&gt;@fsibot&lt;/a&gt; Seq.countBy(fun x-&amp;gt;pown(x/99)3+pown(x%99)3)[0..9800]|&amp;gt;Seq.find(snd&amp;gt;&amp;gt;(=)4)|&amp;gt;fst//&lt;a href=&#34;https://twitter.com/tomaspetricek&#34;&gt;@tomaspetricek&lt;/a&gt; &lt;a href=&#34;https://twitter.com/yukitos&#34;&gt;@yukitos&lt;/a&gt; &lt;a href=&#34;https://twitter.com/kunjee&#34;&gt;@kunjee&lt;/a&gt; &lt;a href=&#34;https://twitter.com/StachuDotNet&#34;&gt;@StachuDotNet&lt;/a&gt; 79chs!&lt;/p&gt;&amp;mdash; Scott Wlaschin (@ScottWlaschin) &lt;a href=&#34;https://twitter.com/ScottWlaschin/status/678286435749863424&#34;&gt;December 19, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: I can&amp;rsquo;t exactly say what is going on here. But I am enjoying it a lot.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Reactive Services with Servicestack and F#</title>
      <link>http://kunjan.in/2015/11/reactive-services-with-servicestack-and-fsharp/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/11/reactive-services-with-servicestack-and-fsharp/</guid>
      <description>&lt;p&gt;Reactive word is not new nowadays. If you want your library to get limelight, use reactive word in the name any way possible and it will definitely get initial attention. Reactive word is appropriate for things that follows &lt;a href=&#34;http://www.reactivemanifesto.org/&#34;&gt;reactive manifesto&lt;/a&gt;. That is true for now. And there are many variant of libraries on server and client to fulfil this.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start from the start of web.&lt;/p&gt;

&lt;p&gt;We were having old web were we used to do post event of page. At the time of posting whole page goes to server. And then &lt;em&gt;loading loading loading&lt;/em&gt; of the page. But after the rise of &lt;a href=&#34;https://jquery.com/&#34;&gt;JQuery&lt;/a&gt; page refresh become the thing of past. AJAX was there even before JQuery but become widely used after that only.
Now, that spinner which was there in browser tab bar / address bar came in center of page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Side Note&lt;/strong&gt;: If you want to make ajax request faster just use a spinner &lt;strong&gt;gif&lt;/strong&gt; which spins faster. Tried and tested thing. With no code change performance issue will be resolved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With hardware getting better and if I be more specific more connected it is easy to store lots of data. And this makes things slower eventually. And user have to wait even for ajax request. So, what is next. With &lt;a href=&#34;http://html5doctor.com/&#34;&gt;HTML5&lt;/a&gt; allowing Web Sockets and Server Events things are becoming real-time as now pushing data from Server to client is possible.&lt;/p&gt;

&lt;p&gt;Server and Client is no more one-sided love story. Now, both can send message to each other. This new change allows build more reactive system.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take example. I request my friend to come with me to visit &lt;code&gt;X&lt;/code&gt; place. I got answer &lt;code&gt;yes, will go.&lt;/code&gt; So, my request is accepted but we haven&amp;rsquo;t visited that place. Visit is still pending. After sometime we visited. So, result happen. I don&amp;rsquo;t have to ask again and again. But that event pushed by that end.&lt;/p&gt;

&lt;p&gt;Same goes for server. In post event client request for some data. But that data may or may not be available at that specific moment. So, Server can send &lt;code&gt;201 - Accepted&lt;/code&gt; status to client. So, data is accepted and waiting for processed result. And whenever result it ready server push data to client. This way neither server is blocked nor client.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is will be no need for spinner. Neither slow not fast.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://signalr.net/&#34;&gt;SignalR&lt;/a&gt; is very well-known example of real-time processing. But I wanted to achieve this by API framework. And nothing can be better than &lt;a href=&#34;https://servicestack.net/&#34;&gt;Servicestack&lt;/a&gt;. It is having Server Sent Event / Server Event support in all 4+ version. So, why not?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s jump into code. Code is in &lt;a href=&#34;http://fsharp.org/&#34;&gt;F#&lt;/a&gt;. It is in F# for a reason and that you will know. Keep on reading.&lt;/p&gt;

&lt;p&gt;I am running a standalone Servicestack host but same code will working with Asp.net host also.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Programe.fs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module reactiveServicestack.main
open ServiceStack
open System
open ServiceStack.Logging

type AppHost() = 
    inherit AppHostHttpListenerBase (&amp;quot;Hello F# Service&amp;quot;, typeof&amp;lt;HelloService&amp;gt;.Assembly)
    override this.Configure container = 
        this.Plugins.Add(new PostmanFeature()) |&amp;gt; ignore
        this.Plugins.Add(new CorsFeature()) |&amp;gt; ignore
        this.Plugins.Add(new ServerEventsFeature()) |&amp;gt; ignore
        let serverEventsFeature = this.GetPlugin&amp;lt;ServerEventsFeature&amp;gt;() 
        printfn &amp;quot;%s&amp;quot; serverEventsFeature.StreamPath
        ignore()


[&amp;lt;EntryPoint&amp;gt;]
let main args = 
    LogManager.LogFactory &amp;lt;- new ConsoleLogFactory()
    let env_port = Environment.GetEnvironmentVariable(&amp;quot;PORT&amp;quot;)
    let port = if env_port = null then &amp;quot;1234&amp;quot; else env_port
    let host = &amp;quot;http://localhost:8080/&amp;quot;
    printfn &amp;quot;listening on %s ...&amp;quot; host
    let appHost = new AppHost()
    appHost.Init() |&amp;gt; ignore
    appHost.Start host |&amp;gt; ignore
    while true do Console.ReadLine() |&amp;gt; ignore
    0 // return an integer exit code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above code is very much classic Servicestack. Nothing fancy here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HelloDto.fs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace reactiveServicestack
open System
open ServiceStack

//I can&#39;t but CLI can mutate this one
[&amp;lt;CLIMutable&amp;gt;]
type HelloResponse = { Result:string }


//There always be hello world, atleast something should be running
[&amp;lt;Route(&amp;quot;/hello&amp;quot;)&amp;gt;]
[&amp;lt;Route(&amp;quot;/hello/{name}&amp;quot;)&amp;gt;]
type Hello() =
    interface IReturn&amp;lt;HelloResponse&amp;gt;
    member val Name = &amp;quot;&amp;quot; with get, set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, POCO members. Hello and HelloResponse. No magic here also.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AsyncProcessor.fs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#nowarn &amp;quot;40&amp;quot;
namespace reactiveServicestack

module SSE =
    open ServiceStack
    let private serverEvent = ServiceStackHost.Instance.Container.TryResolve&amp;lt;IServerEvents&amp;gt;()
    let NotifyAll (msg:&#39;T) = serverEvent.NotifyAll(msg)



module AsyncProcess =
    open System

    let rnd = new Random()
    let agent = 
        MailboxProcessor.Start(fun inbox -&amp;gt; 
            let rec messageLoop = 
                async {
                    let! (msg:Hello) = inbox.Receive()
                    do! Async.Sleep(3000)
                    Console.WriteLine(&amp;quot;Original &amp;quot; + msg.Name)
                    let reversed = msg.Name.ToCharArray() |&amp;gt; Array.rev |&amp;gt; fun x -&amp;gt; new String (x)
                    Console.WriteLine(&amp;quot;Reversed &amp;quot; + reversed)
                    SSE.NotifyAll({HelloResponse.Result = reversed})
                    return! messageLoop
                }
            messageLoop)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here fun starts. I am creating Actor which takes Hello typed message and NotifyAll with HelloResponse after processing name string.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s understand complicated parts.&lt;/p&gt;

&lt;p&gt;I have created SSE module because if I open Servicestack I was getting &lt;code&gt;asyncbuilder&lt;/code&gt; compile error at async keyword. And I needed to open it to expose all the extension methods. So, I wrap things up in another module.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don&amp;rsquo;t&lt;/em&gt; create seperate instance of any kind of ServerEvent implementation instead resolve it as above. Else things will surely not work. I was stuck at that problem for couple of days.&lt;/p&gt;

&lt;p&gt;Actor is very much traditional, I am reversing a string and as it is &lt;em&gt;very complex&lt;/em&gt; process. My actor will take precisely &lt;strong&gt;3&lt;/strong&gt; seconds to do it. And then I am notifying to all from actor itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ideal case it should be Subscriber ID/s or Channel/s.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As, actor is async by nature it may complicate stuff to return things from agent loop. If you have used framework like &lt;a href=&#34;http://getakka.net/&#34;&gt;AKKA&lt;/a&gt; you must be knowing that &lt;code&gt;ASK&lt;/code&gt; is performance heavy in compare to &lt;code&gt;TELL&lt;/code&gt;. This way you can fire result from Actor itself.&lt;/p&gt;

&lt;p&gt;Now, you can easily guess what service will look like&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hello.fs&lt;/code&gt;
    namespace reactiveServicestack
    open ServiceStack
        open ServiceStack.Logging
        open System
        open System.Net&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type HelloService() =
        inherit Service()
        member val serverEvents:IServerEvents = null with get, set
        member this.Get (request:Hello) = 
            {Result = &amp;quot;Hello &amp;quot; + request.Name}
        member this.Post (request: Hello) =
            AsyncProcess.agent.Post(request)
            HttpStatusCode.Accepted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And final piece of puzzle &lt;strong&gt;HTML&lt;/strong&gt;
&lt;code&gt;default.html&lt;/code&gt;
    &lt;html&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Reactive Servicestack&amp;lt;/title&amp;gt;
    &amp;lt;link href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.css&amp;quot; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;Hello this is default page&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Enter Your name&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;name&amp;quot; value=&amp;quot;&amp;quot; /&amp;gt;
        &amp;lt;button id=&amp;quot;reverse&amp;quot;&amp;gt;Reverse&amp;lt;/button&amp;gt;
        &amp;lt;ul&amp;gt;

        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;//code.jquery.com/jquery-2.1.4.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;/js/ss-utils.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        $(&#39;#name&#39;).keypress(function (e) {
            var key = e.which;
            if(key == 13)  // the enter key code
            {
                $(&#39;#reverse&#39;).click();
                $(&#39;#name&#39;).val(&#39;&#39;);
                return false;  
            }
        }); 
        $(&#39;#reverse&#39;).click(function(e) {
            e.preventDefault();
            var name = $(&#39;#name&#39;).val();

            if (name != &#39;&#39; || name != undefined) {
                $.post(&#39;/hello&#39;, {
                        name: name
                    })
                    .done(function() {
                        toastr.success(name + &#39; is very much Accepted!&#39;)
                    });
            }
        });
        var addName = function(reversedName) {
            $(&#39;ul&#39;).append(&#39;&amp;lt;li&amp;gt;&#39; + reversedName + &#39;&amp;lt;/li&amp;gt;&#39;);
        };
        var channel = &#39;home&#39;;
        var eventSource = new EventSource(&#39;/event-stream?channel=home&amp;amp;t=&#39; + new Date().getTime());
        $(eventSource).handleServerEvents({
            handlers: {
                HelloResponse: function(msg) {
                        console.log(msg);
                        addName(msg.Result);
                    }
                    //... Register custom handlers
            }
        });

    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am taking post request and returning &lt;code&gt;201-accepted&lt;/code&gt; instead of &lt;code&gt;200-ok&lt;/code&gt; from server. On client it will go in &lt;code&gt;success&lt;/code&gt; callback only.&lt;/p&gt;

&lt;p&gt;This way we can easily decouple server and client. And this can be used for games, stock market, betting or other reactive systems.&lt;/p&gt;

&lt;p&gt;I am not going in detail of Actor or AKKA but as it natively available in F# so I used it. One of the reason beside being more fun while writing code.&lt;/p&gt;

&lt;p&gt;Please provide your input for this. I don&amp;rsquo;t know this is right / wrong or can&amp;rsquo;t say. But it is very much possible that using current technology even without enabling Web Sockets (&lt;em&gt;Most of the cloud provider supports web sockets&lt;/em&gt;) one can create reactive web services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. - With this there will be no need for spinner at all.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Azure web sites with Paket</title>
      <link>http://kunjan.in/2015/11/azure-web-sites-with-paket/</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/11/azure-web-sites-with-paket/</guid>
      <description>&lt;p&gt;Whoever worked with Microsoft Shop knows about &lt;a href=&#34;https://www.nuget.org/&#34;&gt;nuget&lt;/a&gt;. It is package manager for anything and everything related to .Net. And it is getting better and better with versions coming in. But again it is nowhere near maturity needed to work with projects having many small projects. Things get cranky soon.&lt;/p&gt;

&lt;p&gt;Now, there is better option as per my opinion called &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;Paket&lt;/a&gt;. Very easy to get started. And so damn reliable. Couple of more command to learn but I guess it is ok. It most of the mess of nuget. And best thing no XML.&lt;/p&gt;

&lt;p&gt;Now, I normally throw anything and everything to Azure websites. Just do experiments and its free. Mostly I put project in &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt; and pull in Azure. Easiest way to test something or anything which need network.&lt;/p&gt;

&lt;p&gt;Now, you can have Paket also instead of nuget with minimum changes. There are detailed &lt;a href=&#34;http://www.hanselman.com/blog/RunningSuaveioAndFWithFAKEInAzureWebAppsWithGitAndTheDeployButton.aspx&#34;&gt;article&lt;/a&gt; you can found written by &lt;a href=&#34;http://www.hanselman.com&#34;&gt;Scott Hanselman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But for you existing or new web project what can be minimum requirement.&lt;/p&gt;

&lt;p&gt;You need to create &lt;code&gt;.deployment&lt;/code&gt; in root of your project. It will tell Azure build system to not to go with defaults. (I guess build system is called Kudu.)&lt;/p&gt;

&lt;p&gt;In that file copy paste below code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[config]
command = build.cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two lines to tell use &lt;code&gt;build.cmd&lt;/code&gt; to build project.&lt;/p&gt;

&lt;p&gt;Now, we obviously need &lt;code&gt;build.cmd&lt;/code&gt; file in root.&lt;/p&gt;

&lt;p&gt;And here is code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@ECHO OFF
setlocal

echo ====== Restoring packages... ======

if not exist .paket\paket.exe (
  .paket\paket.bootstrapper.exe
)

.paket\paket.exe restore

if not %ERRORLEVEL% == 0 (
  echo ====== Failed to restore packages. ======
  exit 1
)

echo ====== Building... ======

msbuild /p:Configuration=Release

if not %ERRORLEVEL% == 0 (
echo ====== Build failed. ======
  exit 1
)

if not &amp;quot;%DEPLOYMENT_TARGET%&amp;quot; == &amp;quot;&amp;quot; (
  echo ====== Deploying... ======
  xcopy /y /e &amp;lt;project name&amp;gt; &amp;quot;%DEPLOYMENT_TARGET%&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code is very much self explanatory.&lt;/p&gt;

&lt;p&gt;First pull latest paket.exe, then restore package. msbuild is there only so use it. And age-old xcopy to copy built files to deployment target.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bang! Its done. You can check things out in with log tail or console on azure portal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to go little bit advanced and want kinda build system then you can always try for &lt;a href=&#34;http://fsharp.github.io/FAKE/&#34;&gt;FAKE&lt;/a&gt;. But if you are in great hurry and don&amp;rsquo;t want waste time with nuget issues go for Paket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Packaging!!!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angularjs and the Mess we are in</title>
      <link>http://kunjan.in/2015/11/angularjs-and-the-mess-we-are-in/</link>
      <pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/11/angularjs-and-the-mess-we-are-in/</guid>
      <description>

&lt;p&gt;Who doesn&amp;rsquo;t know &lt;a href=&#34;https://angularjs.org/&#34;&gt;Angularjs&lt;/a&gt;?!? Everyone worked is web, mobile, server, windows, mac, Linux, Google, Microsoft or anyway related to this knows about it. And its fun when people tell me&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You know about angularjs. Its pretty hot now a days. I&amp;rsquo;m planning to learn it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh man&amp;hellip;&lt;/p&gt;

&lt;p&gt;Ok I am no expert here in Angularjs. And I prefer not to be expert with any framework. Be it anything. But you know there is another &lt;a href=&#34;https://angular.io/&#34;&gt;Angularjs&lt;/a&gt; from another universe. If you are learning (like seriously) then go for this one.&lt;/p&gt;

&lt;p&gt;But be sure. There is a chance you will be inviting a hell of mess. I have been working with angular since last 3+ year. Either leading a team or part of team. And one thing I learn hard way. You need a discipline when you are working with JavaScript. But you need discipline of delta forces when you are working with angularjs.&lt;/p&gt;

&lt;p&gt;As metioned in site it is a superhero. And like every superhero it also should have responsiblitiy. But angular is abusing JavaScript every way possible. If something is possible that doesn&amp;rsquo;t means we should be doing it. We have damn book called &lt;a href=&#34;http://shop.oreilly.com/product/9780596517748.do&#34;&gt;JavaScript: Good Parts&lt;/a&gt; all about it.&lt;/p&gt;

&lt;p&gt;It called Good Parts means you just use Good Parts and leave bad one alone. But with angular it is like you are leaving in Bar and told not to touch Alcohol. On top of it you have &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.untappdllc.app&amp;amp;hl=en&#34;&gt;untapped&lt;/a&gt; installed in your mobile.&lt;/p&gt;

&lt;p&gt;Why this? Lets take things one by one&lt;/p&gt;

&lt;h2 id=&#34;scope-poor-man-s-global&#34;&gt;Scope - Poor man&amp;rsquo;s global&lt;/h2&gt;

&lt;p&gt;We should not use global. That is proven truth. No, doubt in it. But what about &lt;strong&gt;We love &lt;em&gt;global&lt;/em&gt; so much.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We got scope then. JSLint can&amp;rsquo;t catch it and we still have it. Now, angular lover may argue that we should not use it. But how can you prevent it from using it. It all comes to putting as rule in project wiki or training. But there is no way to prevent it. At least I don&amp;rsquo;t know one.&lt;/p&gt;

&lt;h2 id=&#34;magical-directives&#34;&gt;Magical- Directives&lt;/h2&gt;

&lt;p&gt;Whenever you start abusing Angularjs people comes up with &lt;code&gt;But we have Directives?!?&lt;/code&gt; that magically solves everything. The problem with that it is hiding too much. Its good if things works out but when it breaks. Oh man. &lt;em&gt;You seriously wish that never happen.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you still like Directives try implement two directive on one. It will be too much fun. And pure magic if one directive is created by you and other is created by third third-party.&lt;/p&gt;

&lt;h2 id=&#34;three-musketeers-service-factory-and-provider&#34;&gt;Three musketeers - Service, Factory and Provider&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t know how many times I have searched google with &lt;code&gt;Service vs Factor vs Provider&lt;/code&gt; . Nowadays you don&amp;rsquo;t even have to put angularjs on top of that. If you write above message you will have angularjs answer only. It way too complicated for simple module with helper functions. Aren&amp;rsquo;t we all happy with few base global in age of JQuery that passed in as parameter in modular functions. And now we have DI(Proudly called as Dependancy Injection).&lt;/p&gt;

&lt;h2 id=&#34;wired-di&#34;&gt;Wired - DI&lt;/h2&gt;

&lt;p&gt;It is good thing. A good thing invented from the object-oriented concept. And then it is used almost every where. whether it is needed or not. For the case of Angular it is good we can have module without worrying about modules. Directly available in function. But then what about other libraries we need to created wrapper around it to make angular way. And then have plenty of gulp or grunt plumbing tools so you can save your ass when things minified and combined.&lt;/p&gt;

&lt;h2 id=&#34;grass-is-always-green-on-other-side&#34;&gt;Grass is always green on other side&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t say angular beast we never wanted. But you need to use it carefully. I have seen more than enough projects, new and legacy using angular in all wrong way. It make tough to debug or extend. Every time you got feeling that lets dump it all and make it again. We don&amp;rsquo;t need to learn another framework just learn &lt;code&gt;JavaScript - Good Parts&lt;/code&gt;. And things are all good. But instead most of resources are wasted on teaching Angularjs. With a hope that &lt;strong&gt;Super Hero&lt;/strong&gt; framework will solve every issue we have.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not going to be. It was never going to be. It will never going to be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are the one who gonna solve our issue. Pick your framework wisely and try not to hope so much from it.&lt;/p&gt;

&lt;h2 id=&#34;my-personal-pick&#34;&gt;My Personal Pick&lt;/h2&gt;

&lt;p&gt;If I want to go so hard on my self and don&amp;rsquo;t want any error in my &lt;strong&gt;to be&lt;/strong&gt; big project. I will choose &lt;a href=&#34;http://elm-lang.org&#34;&gt;elm&lt;/a&gt;. It&amp;rsquo;s not framework but a hell of a language with crazy html support.&lt;/p&gt;

&lt;p&gt;If people are coming from JavaScript land to join me then I ll go for &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there is a need quick two-way binding on a single page then &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;knockout&lt;/a&gt; is a good thing.&lt;/p&gt;

&lt;p&gt;If I want to go fast for small project. And I am the only one working on it at least for now. Or may be some single person working on it. I will go with Angularjs. I don&amp;rsquo;t mind. It is quick and easy.&lt;/p&gt;

&lt;p&gt;Big project. &lt;a href=&#34;http://emberjs.com/&#34;&gt;Ember&lt;/a&gt; is there. But few times I feel it is unnecessary complexity. Two way binding and not much of angular mess &lt;a href=&#34;http://aurelia.io/&#34;&gt;Aurelia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Above all opinion is derived from my personal experience and not influenced by any one. And it is my own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Command Pattern</title>
      <link>http://kunjan.in/2015/04/functional-command-pattern/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-command-pattern/</guid>
      <description>&lt;p&gt;Command pattern is a pattern which allows executor of the pattern to execute or playback the commands. In most of the application wherever Undo/Redo is implemented this pattern is used.&lt;/p&gt;

&lt;p&gt;Here is C# code.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/5wmvGN&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Now, in this code Command Pattern is not in its purest form. As, normally in command pattern we are saving state of outside object. Instead I just returned the result to mock out side object.&lt;/p&gt;

&lt;p&gt;Now have a look at similar F# code. That is doing kinda same thing.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/htQsqv&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Here, instead of class I am using functions with the command type. And definition of the command is given as type instead of interface. Now, this is fun with functional programming in general where functions are first class citizen. I can save commands and events like objects only. I don&amp;rsquo;t have to wrap around some classes. This makes code more concise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fan of &lt;a href=&#34;http://martinfowler.com/bliki/CQRS.html&#34;&gt;CQRS&lt;/a&gt; and &lt;a href=&#34;http://www.martinfowler.com/eaaDev/EventSourcing.html&#34;&gt;Event Sourcing&lt;/a&gt;; listen up these both design concepts are standing on the shoulders of command pattern.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Functional Strategy Pattern</title>
      <link>http://kunjan.in/2015/04/functional-strategy-pattern/</link>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-strategy-pattern/</guid>
      <description>&lt;p&gt;Another pattern that is widely used in Object Oriented world. And as far as .Net world is concern it is may be most used pattern in wide range of .Net API. And it &lt;em&gt;heavily&lt;/em&gt; used in &lt;em&gt;heavily&lt;/em&gt; used LINQ API.&lt;/p&gt;

&lt;p&gt;So, I guess giving a understanding of that is kinda waste of space. Have a look at C# code.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/c4qcvo&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;People familiar with LINQ and lovers of Lambda will definitely argue that this is can be replaced by delegates. And for the face I am arguing the same. But for now I have took this sample as a traditional practice.&lt;/p&gt;

&lt;p&gt;Now, have a look at the F# code doing the same.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/rhn63P&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Now, it is definitely not &lt;strong&gt;one to one&lt;/strong&gt; replacement as I have did in last few posts. But here I have replaced class with function but we are achieving the same thing.&lt;/p&gt;

&lt;p&gt;Now, what is strategy pattern. As name suggest it is used to provide strategy from the consumer end. It is like I am saying that I want coffee and also I am telling I want cappuccino. And as shown in sample for sorting I am passing sorting strategy also. For example case I haven&amp;rsquo;t passed array else I have to pass array or list and also strategy or how to sort it. It is mainly used when consumer is having control on how to do execution but execution is done by someone else.&lt;/p&gt;

&lt;p&gt;Now, in case of C# and Java8 where lambda is available. So I have this functional behavior there also. But for the fact it is functional programming concept of passing functions around &lt;em&gt;(or some may argue it is object oriented concept in purest form)&lt;/em&gt; and syntax wise it more suitable / human friendly in functional programming language.&lt;/p&gt;

&lt;p&gt;Here is C# example.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/63PK93&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;It is very much near to F# counter part. Only F# syntax is having less noise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It something all togather when this pattern shown in context of Functional Programming. I am just composing functions. But it serves as Strategy Pattern of OOP so I have used that.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Functional Singleton Pattern</title>
      <link>http://kunjan.in/2015/04/functional-singleton-pattern/</link>
      <pubDate>Thu, 23 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-singleton-pattern/</guid>
      <description>&lt;p&gt;This is my favorite pattern. First pattern I learn. And till date I don&amp;rsquo;t know where to use it. &lt;strong&gt;So, I use everywhere. :P&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have mainly used for database connection object and then all JavaScript frameworks are exposing Singleton object only. I can say it is quite useful in case of web.&lt;/p&gt;

&lt;p&gt;Fun part about this pattern is that most of the people including me always use this pattern to show off that we know patterns and we follow it in practice but in most cases that practice starts and stops with Singleton Pattern.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s understand the pattern, as name suggested this pattern is propagating singularity. Object of specific class will be created once and only once but No more. Object creation is totally hidden away from consumer and with static method object will be handed over to consumer. If there is a instance presence it will be handed over else new instance will be created and it will be given to consumer.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check out the C# code&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/ou8ReI&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;See, simple and easy.&lt;/p&gt;

&lt;p&gt;And now here is F# code. Even simpler and easier&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/EAcx3W&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;Look ma no &lt;code&gt;null&lt;/code&gt;. As F# is not allowing null by default in the system there is no need to check it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead make constructor private to stop creating object of type and provide same instance of type again and again.&lt;/p&gt;

&lt;p&gt;Now, in current scenarios where garbage collector are so powerful and we are having quite a good amount of hardware to process. Singleton is not used while writing domain/business code. But still it is widely used on API side to expose specific functionality.&lt;/p&gt;

&lt;p&gt;I am still to find relevance in case of functional programming. In functional programming &lt;code&gt;type&lt;/code&gt; is different then &lt;code&gt;class&lt;/code&gt;. In normal cases they don&amp;rsquo;t have behaviors attached with it. So, it reducing the need of this pattern.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Factory Pattern</title>
      <link>http://kunjan.in/2015/04/functional-factory-pattern/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/functional-factory-pattern/</guid>
      <description>&lt;p&gt;The fun part working or explaining functional pattern is word &lt;code&gt;functional&lt;/code&gt; can be used in very &lt;code&gt;fun&lt;/code&gt; way. Just like it is used in title here.&lt;/p&gt;

&lt;p&gt;Now, factory pattern may be the most used pattern in Object Oriented world. Here is code in &lt;code&gt;C#&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/omFgPe&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;  

&lt;p&gt;Factory method is basically used to abstract away the object creation. I am not worried how object is created but I am worried about the behavior of the objects that are created.
Now, lets have a look at &lt;code&gt;F#&lt;/code&gt; equivalent&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;475&#34; src=&#34;https://dotnetfiddle.net/Widget/vt23Gc&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;If you can see it is short and simple and providing same result.&lt;/p&gt;

&lt;p&gt;Now, functional programming is not &lt;code&gt;one to one&lt;/code&gt; map with Object Oriented programming. But we can always have similar a concept.&lt;/p&gt;

&lt;p&gt;Factory Pattern simply hiding the object creation. And in F# we are having option type which is helping us to provide concrete definition of product. And that is the reason we can skip the concrete class and have product definition in type.&lt;/p&gt;

&lt;p&gt;I have took examples for this post from &lt;a href=&#34;http://www.dofactory.com/&#34;&gt;Dofactory&lt;/a&gt; and &lt;a href=&#34;http://fssnip.net/authors/Tao+Liu&#34;&gt;Tao Liu&lt;/a&gt; s work. I have made few changes thought to make it as similar as possible. In future post I will try to go into greater detail about respective pattern and also check out patterns that can be absolute when you come to the world of functional programming.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;F# people. Your comments and review are required. Will update the code as per the suggestions. Do provide them. I don&amp;rsquo;t mind adding examples of other functional language if anyone is helping me out.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Demystifying Design Pattern in a Functional Way</title>
      <link>http://kunjan.in/2015/04/demystifying-design-pattern-in-a-functional-way/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/04/demystifying-design-pattern-in-a-functional-way/</guid>
      <description>&lt;p&gt;As functional programming is taking pace in current software development. There is always a question what is the difference and why on the earth I should bother about it.&lt;/p&gt;

&lt;p&gt;Most of the time reason of the question comes because of human nature of resistance towards learning new things. And then there are people who can easily learn new things but even for them unlearning something and re-learning new things is pretty tough. And this makes a problem every time.&lt;/p&gt;

&lt;p&gt;Here I am not saying I am going to explain anything as expert. I am no where near expert and I also faces same problems as above. But I guess new things are always worth trying.&lt;/p&gt;

&lt;p&gt;Now one the things that get projected as &lt;strong&gt;silver bullet&lt;/strong&gt; for every software solutions is &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_design_pattern&#34;&gt;Design Patterns&lt;/a&gt;. Now for the facts they are good, very good. May be best thing that can happen to Object Oriented Programming. But it is showing a concept and most of the time we loose that concept in an implementation.&lt;/p&gt;

&lt;p&gt;If we go into history, there are two ways of solving problem one is &lt;a href=&#34;https://en.wikipedia.org/wiki/Alan_Turing&#34;&gt;Turing&lt;/a&gt; way (OOP) and other is &lt;a href=&#34;https://en.wikipedia.org/wiki/Alonzo_Church&#34;&gt;Church&lt;/a&gt; way (FP). That is it. They both are ways and you can achieve goals both ways.&lt;/p&gt;

&lt;p&gt;Now here comes the personal choice what way you like to choose based on given circumstances. Turing way is good when I have limited resources to process details/data. While Church way is good when I have good number of resources to process details/data.&lt;/p&gt;

&lt;p&gt;For me or I guess for all the people from functional programming community Church ways is a choice. And visible benefit of selecting that is readability and representation of code I am doing. It is more like what I am saying is I am writing. And now it is up to computer to process that. Now, computer need to be that powerful to process almost natural language.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am not considering natural / logic language here. It is out of scope of this article, blog and also my brain for now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that is reason it is getting pace now a days. We are having hardware resources to process that. Or may be we can say on reverse way that to utilize this much hardware church based approach is far better. As it is having benefit towards making things simple.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/presentations/Simple-Made-Easy&#34;&gt;I have said simple, I haven&amp;rsquo;t said easy&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, here comes the problem. I need to unlearn or relearn the concepts I have learn. And I have made it easy for me after working so hard.&lt;/p&gt;

&lt;p&gt;Practically speaking I don&amp;rsquo;t see any way out. But there is no need to completely unlearn it but may be can be used in some other way. Like the Design Pattern from Object Oriented world.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p&gt;I love this slide from &lt;a href=&#34;https://twitter.com/ScottWlaschin&#34;&gt;@ScottWlaschin&lt;/a&gt; &amp;#39;s talk on FP &amp;quot;patterns&amp;quot; &lt;a href=&#34;http://t.co/8UuwVqlelD&#34;&gt;pic.twitter.com/8UuwVqlelD&lt;/a&gt;&lt;/p&gt;&amp;mdash; Knot, Not Naught! (@jeroldhaas) &lt;a href=&#34;https://twitter.com/jeroldhaas/status/535919819355598848&#34;&gt;November 21, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I guess that was easy and simple both. Everything is just a functions. Ok, that is said I am sharing a video everyone in functional programming just loves from &lt;a href=&#34;https://twitter.com/ScottWlaschin&#34;&gt;Scott Wlaschin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;https://player.vimeo.com/video/113588389&#34; width=&#34;500&#34; height=&#34;281&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href=&#34;https://vimeo.com/113588389&#34;&gt;Functional programming design patterns by Scott Wlaschin&lt;/a&gt; from &lt;a href=&#34;https://vimeo.com/ndcconferences&#34;&gt;NDC Conferences&lt;/a&gt; on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Now, in coming post I will try to take every pattern one by one and try to demystify it. Obviously in a functional way. And also try to explore some functional patterns also. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Journey in Search of Destination</title>
      <link>http://kunjan.in/2015/03/journey-in-search-of-destination/</link>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2015/03/journey-in-search-of-destination/</guid>
      <description>&lt;p&gt;I never thought I would make this public. I wrote long back for one of my dear cousin. It was relevant then. But it is more relevant now. One of my best friend, batch mate, college mate, colleague at one point of time, rommie is now moving to another country. With a aim to never looking back for all the good reasons.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/nrezzzz&#34;&gt;Andrew Vyas&lt;/a&gt; this is for you. You are one of the friend I never wanted because I knew one day time flew and you or me will move on and that may be good for future but at point it is utterly painful. Pain that can&amp;rsquo;t be defined by words my friend. But still here are few words&lt;/p&gt;

&lt;p&gt;मंजिल की तलाश में दूर हम निकल गए &lt;br&gt;
रस्ते बनते गए हमराही मिलते गए&lt;br&gt;
मंजिल तोह आज भी दूर है&lt;br&gt;
मंजिल के लिए प्यार भी  वही है&lt;br&gt;
लेकिन पता नहीं क्यों रस्ते इतने अच्छे क्यों है&lt;br&gt;
आँखे इतनी नर्म क्यों है&lt;br&gt;
मंजिल पाने की चाह तो आज भी वही है&lt;br&gt;
हमराही को छोड़ने का गम क्यों है&lt;br&gt;
हमराही कल भी बिछड़े थे, आज भी बिछड़ रहे है&lt;br&gt;
लेकिन दील मे एक सन्नाटा, तन्हाई, दर्द आज ही क्यों है&lt;br&gt;
मंजिल की तलाश में हम तो फीर भी निकल चले है&lt;br&gt;
रस्ते फीर बनते चले है, हमराही फीर मिलते चले है&lt;br&gt;
लेकिन दील मै उनकी याद क्यों है, ये दर्द एक बेचैनी सि क्यों है&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For people who don&amp;rsquo;t understand Hindi, here is English translation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In search of destination we came long way&lt;br&gt;
roads started carving them selves, new companion started joining me&lt;br&gt;
destination is still far&lt;br&gt;
love for destination is still there&lt;br&gt;
but don&amp;rsquo;t know why roads seems more beautiful&lt;br&gt;
and have tears at the corner of my eyes&lt;br&gt;
Desire to get to the destination is still the same&lt;br&gt;
then why there is pain for leaving companion back&lt;br&gt;
I left companion and I am leaving companion back&lt;br&gt;
then why there is silence, loneliness and pain in heart&lt;br&gt;
Still moving on in search of destination&lt;br&gt;
roads are being made again, companion are started joining again&lt;br&gt;
then why there are memories them of who left behind, why there is pain, restlessness in heart.&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dear friend wherever you go my wishes and prayers are always there for you.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Typed Hack of Cloudant using F#</title>
      <link>http://kunjan.in/2014/11/typed-hack-of-cloudant-using-fsharp/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2014/11/typed-hack-of-cloudant-using-fsharp/</guid>
      <description>&lt;p&gt;There is a continues war between typed and untyped data. But then there is need of finding a middle ground for ever growing application. There is place, a requirement when I feel application should be typed and data store should be untyped. So, I created this little code snippet to access cloudant (a couchbase fork) NOSQL database.&lt;/p&gt;

&lt;p&gt;I was knowing about &lt;a href=&#34;http://cloudant.com&#34;&gt;Cloudant&lt;/a&gt; from long back. Even before IBM bought it. It is indeed a wonderful service and also kinda free for small stuff. I thought this will be best fit for now. (I still don&amp;rsquo;t know why I didn&amp;rsquo;t use Mongodb).&lt;/p&gt;

&lt;p&gt;As there is no need of scary relations ships with database. So, I decided to use this one.&lt;/p&gt;

&lt;p&gt;Now as one problem is solved other started. It is saving data that is in JSON format. That is untyped and F# is statically typed. I have tried few libraries developed in C# but was not happy. So, I thought it is just a HTTP request, why shouldn&amp;rsquo;t I give it as shot to make one of my own helper module? It is may be some what dirty attempt but I got it working what I needed with less than 100 lines. Here is code snippets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#r &amp;quot;../packages/Http.fs.1.4.0/lib/net40/HttpClient.dll&amp;quot;
#r &amp;quot;../packages/Newtonsoft.Json.6.0.6/lib/net45/Newtonsoft.Json.dll&amp;quot;

open HttpClient
open Newtonsoft.Json
open Newtonsoft.Json.Linq

[&amp;lt;CLIMutableAttribute&amp;gt;]
type Row&amp;lt;&#39;a&amp;gt; = 
    { id : string
      key : string
      value : &#39;a }

[&amp;lt;CLIMutableAttribute&amp;gt;]
type ResultSet&amp;lt;&#39;a&amp;gt; = 
    { total_rows : int
      offset : int
      rows : Row&amp;lt;&#39;a&amp;gt; [] }

[&amp;lt;CLIMutableAttribute&amp;gt;]
type PostResult = 
    { ok : string
      id : string
      rev : string }

[&amp;lt;CLIMutableAttribute&amp;gt;]
type PostError = 
    { error : string
      reason : string }

let cloudantUrl = @&amp;quot;&amp;lt;cloudanturl/databasename/&amp;gt;&amp;quot;
let username = @&amp;quot;&amp;lt;username&amp;gt;&amp;quot;
let password = @&amp;quot;&amp;lt;password&amp;gt;&amp;quot;

let private cloudantGet url = 
    let request = 
        createRequest Get url
        |&amp;gt; withBasicAuthentication username password
        |&amp;gt; withHeader (ContentType &amp;quot;application/json&amp;quot;)
    request |&amp;gt; getResponseBody

let private cloudantPost url data = 
    let request = 
        createRequest Post url
        |&amp;gt; withBasicAuthentication username password
        |&amp;gt; withBody data
        |&amp;gt; withHeader (ContentType &amp;quot;application/json&amp;quot;)
    request |&amp;gt; getResponseBody

let private checkDataForNewId (data : JObject) = 
    let removeIdrev (data : JObject) = 
        data.Remove(&amp;quot;_id&amp;quot;) |&amp;gt; ignore
        data.Remove(&amp;quot;_rev&amp;quot;) |&amp;gt; ignore
    if System.String.IsNullOrEmpty(data.[&amp;quot;_id&amp;quot;].ToString()) || System.String.IsNullOrEmpty(data.[&amp;quot;_rev&amp;quot;].ToString()) then 
        removeIdrev data
    data

let PostJson&amp;lt;&#39;a&amp;gt; data = 
    let serializedObject = JObject.FromObject(data) |&amp;gt; checkDataForNewId
    serializedObject.Add(&amp;quot;$doctype&amp;quot;, JToken.Parse(&amp;quot;&#39;&amp;quot; + data.GetType().Name + &amp;quot;&#39;&amp;quot;))
    cloudantPost cloudantUrl &amp;lt;| serializedObject.ToString()

let GetJsonByType&amp;lt;&#39;a&amp;gt; = 
    let resultset = 
        JsonConvert.DeserializeObject&amp;lt;ResultSet&amp;lt;&#39;a&amp;gt;&amp;gt;
            (cloudantGet (cloudantUrl + &amp;quot;/_design/Type/_view/&amp;quot; + typeof&amp;lt;&#39;a&amp;gt;.Name))
    query { 
        for row in resultset.rows do
            select row.value
    }

let GetJsonById&amp;lt;&#39;a&amp;gt; Id = JsonConvert.DeserializeObject&amp;lt;&#39;a&amp;gt;(cloudantGet (cloudantUrl + Id))

[&amp;lt;CLIMutableAttribute&amp;gt;]
type Person = 
    { _id : string
      _rev : string
      FirstName : string
      LastName : string }

let newPerson = 
    { _id = &amp;quot;&amp;quot;
      _rev = &amp;quot;&amp;quot;
      FirstName = &amp;quot;Boom&amp;quot;
      LastName = &amp;quot;Baam&amp;quot; }

let inline isNull (x:^a when ^a : not struct) =
    obj.ReferenceEquals (x, Unchecked.defaultof&amp;lt;_&amp;gt;)

let findPerson = 
    query { 
        for p in GetJsonByType&amp;lt;Person&amp;gt; do
            where (p.FirstName = &amp;quot;Boom&amp;quot;)
            select p
            headOrDefault
            }
isNull findPerson    
GetJsonById&amp;lt;Person&amp;gt; (&amp;quot;3b389dc6b8ee0dcbf7f366faaa59cf42&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In above code below part is just for testing. And even with that code snippet is 98 lines. So, with blank line removed it is even short.&lt;/p&gt;

&lt;p&gt;Now, in cloudant I need to create views so its code is like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function(doc) {
    if (doc.$doctype !== &amp;quot;Person&amp;quot;) return;
    var copydoc = JSON.parse(JSON.stringify(doc));
    delete copydoc[&amp;quot;$doctype&amp;quot;];
    emit(doc._id,copydoc);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I need &lt;code&gt;$doctype&lt;/code&gt; while I am inserting or updating data only, not while reading. So, I am removing it. As I am already filtering based on type.&lt;/p&gt;

&lt;p&gt;In above code two libraries are getting used one is &lt;a href=&#34;https://github.com/relentless/Http.fs&#34;&gt;Http.fs&lt;/a&gt; and the other is &lt;a href=&#34;http://james.newtonking.com/json&#34;&gt;JSON.net&lt;/a&gt; libraries.&lt;/p&gt;

&lt;p&gt;In library as you can see I am not doing anything special. I am inserting data with type information. If new data is there I am removing &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;_rev&lt;/code&gt; and for simplicity sake I had put &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;_rev&lt;/code&gt; in all the types I am using to interacting with Cloudant data store.&lt;/p&gt;

&lt;p&gt;So, now whenever I am reading I just need to give type and that will be fetched as collection of that typed records. And once collection came to memory now I have powerful F# to process data. In above code I am using &lt;code&gt;query&lt;/code&gt; expression to do so. It becomes very easy and fun to use. And it is damn fast. At least for now.&lt;/p&gt;

&lt;p&gt;Now, I don&amp;rsquo;t know it if perfect or not. It kinda part functional and part Object Oriented as far as I know. Should I convert this to Type Provider or is it possible or not? I don&amp;rsquo;t know. But one thing is sure I am achieving what I wanted with simplest possible code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dear F# community members&lt;/strong&gt; do provide your views on this. And also let me know if it will be use full to make it more mature and push it as nuget package. Or may be a type provider for Cloudant?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Highly inspired by &lt;a href=&#34;https://twitter.com/dmohl&#34;&gt;Daniel Mohl&amp;rsquo;s&lt;/a&gt; old library &lt;a href=&#34;https://github.com/dmohl/FSharpCouch&#34;&gt;FSharpCouch&lt;/a&gt;. Thank you&amp;hellip; :)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Sails sailing seamlessly on Azure Web Sites</title>
      <link>http://kunjan.in/2014/11/sails-sailing-seamlessly-on-azure-web-sites/</link>
      <pubDate>Fri, 07 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://kunjan.in/2014/11/sails-sailing-seamlessly-on-azure-web-sites/</guid>
      <description>&lt;p&gt;There are lots of &lt;a href=&#34;http://nodeframework.com/&#34;&gt;frameworks&lt;/a&gt; for web development in &lt;a href=&#34;http://nodejs.org/&#34;&gt;Nodejs&lt;/a&gt;. Many of them are pretty cool. I pretty much like the &lt;a href=&#34;http://sailsjs.org/#/&#34;&gt;SailsJS&lt;/a&gt;. And also have worked on that in recent past.&lt;/p&gt;

&lt;p&gt;Now, when it comes to hosting I love the &lt;a href=&#34;http://azure.microsoft.com/en-us/&#34;&gt;Azure&lt;/a&gt; for various reasons. It is specially awesome when it comes to web sites. You do some experiments and throw it towards azure and that is ready for world to check out. My many experiments with &lt;a href=&#34;http://kunjan.in/category/functional-web/&#34;&gt;F# and Web&lt;/a&gt; are already there.&lt;/p&gt;

&lt;p&gt;Recently I was talking with a friend about SailsJS and discussion kinda stuck at deployment part. As it is having kinda manual process involved. It is never a issue to fire a few commands but even why I should waste few key strokes when that can be done by Azure.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always a fan of continues integration and continues delivery mechanism&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I searched Google to find out if anyone has done this before. Results showing couple of examples; but all with spinning up VM on Azure and hosting a application. But I think that is to a overkill.&lt;/p&gt;

&lt;p&gt;I tried &lt;code&gt;sails new&lt;/code&gt; and put a web.config file in root folder and try to published it with web matrix. And web site crashed. &lt;strong&gt;&lt;em&gt;I still don&amp;rsquo;t recall when things just run without crashing at first shot with me.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I can see the streaming log (&lt;em&gt;console.log in nodejs case&lt;/em&gt;) with &lt;code&gt;azure site log tail &amp;lt;sitename&amp;gt;&lt;/code&gt; and found out that it is not getting node modules. That is weird as I was pushing npm_modules too.&lt;/p&gt;

&lt;p&gt;Then I tried with github repository. And that thing just worked. Without any issue and also directly in production mode. (&lt;em&gt;I seriously don&amp;rsquo;t know how it switched to production mode. As for production mode I need to pass parameter &amp;ndash;prod with app.js&lt;/em&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Don&amp;rsquo;t forget to change server.js to app.js in web.config. I guess it is kinda required. I am also skipping npm_modules with gitignore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Right now first page is running without any issue. So, now it is time to sailing on azure web sites with sailsjs.&lt;/p&gt;

&lt;p&gt;Here is &lt;a href=&#34;http://sailslift.azurewebsites.net/&#34;&gt;demo&lt;/a&gt; and my &lt;a href=&#34;https://github.com/kunjee17/sailslift&#34;&gt;github repo&lt;/a&gt;. Feel free to clone and give PR with some demo application. I seriously like to see how far it can go.&lt;/p&gt;

&lt;p&gt;Let me know if any further details are required.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>